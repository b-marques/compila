const statVisitor = require("./lib/statVisitor").statVisitor;

/**
 * This Visitor walks the tree generated by parsers and produces code
 *
 * @returns {object}
 */
class Visitor extends statVisitor {
  constructor() {
    super();
    this.labels = -1;
    this.temporary = -1;
  }
  /**
   * Entry point of tree visiting
   *
   * @param {object} ctx
   * @returns {string}
   */
  start(ctx) {
    let attributes = {
      next: "end"
    };

    let synthesized = this.visitStatement(ctx, attributes);
    attributes.code = synthesized.code + attributes.next + ":";
    return attributes;
  }

  newLabel() {
    this.labels = this.labels + 1;
    return "L" + this.labels;
  }

  newTemporary() {
    this.temporary = this.temporary + 1;
    return "t" + this.temporary;
  }

  firstChild(ctx) {
    let first_child;
    if (ctx.children === null) {
      first_child = "epsilon";
    } else if (ctx.children[0].ruleIndex !== undefined) {
      first_child = ctx.parser.ruleNames[ctx.children[0].ruleIndex];
    } else {
      first_child = ctx.parser.symbolicNames[ctx.children[0].symbol.type];
    }
    return first_child;
  }

  visitChildren(ctx) {
    let code = "";
    for (let i = 0; i < ctx.getChildCount(); i++) {
      code += this.visit(ctx.getChild(i));
    }
    return code.trim();
  }

  visitTerminal(ctx) {
    return ctx.getText();
  }

  visitStatement(ctx, attributes) {
    let local_attributes = {};
    switch (this.firstChild(ctx)) {
      /* STATEMENT -> int ident BRACKETS MULTIVARDECL ; */
      case "IntConstant":
        break;

      /* STATEMENT -> string ident BRACKETS MULTIVARDECL ; */
      case "StringConstant":
        break;

      /* STATEMENT -> ident VARORATRIB */
      case "Identifier":
        break;

      /* STATEMENT -> PRINTSTAT ; */
      case "printstat":
        break;

      /* STATEMENT -> READSTAT ; */
      case "readstat":
        break;

      /* STATEMENT -> RETURNSTAT ; */
      case "returnstat":
        return this.visitReturnstat(ctx.getChild(0));

      /* STATEMENT -> SUPERSTAT ; */
      case "superstat":
        break;

      /* STATEMENT -> IFSTAT */
      case "ifstat":
        /* IFSTAT.next = STATEMENT.next */
        local_attributes.next = attributes.next;
        let ifstat = this.visitIfstat(ctx.getChild(0), local_attributes);
        /* STATEMENT.code = IFSTAT.code */
        return { code: ifstat.code };

      /* STATEMENT -> FORSTAT */
      case "forstat":
        break;

      /* STATEMENT -> { STATLIST } */
      case "statlist":
        break;

      /* STATEMENT -> break ; */
      case "Break":
        return { code: "break" };

      /* STATEMENT -> ; */
      case "Semi":
        return { code: "" };

      default:
        return this.visit(ctx.getChild(0), attributes);
    }
  }

  visitIfstat(ctx, attributes) {
    let local_attributes = {};
    let numexpression, statement, code;

    switch (this.firstChild(ctx)) {
      /* IFSTAT -> if ( NUMEXPRESSION ) STATEMENT */
      case "If":
        numexpression = this.visitNumexpression(ctx.getChild(2));

        /* STATEMENT.next = IFSTAT.next */
        local_attributes.next = attributes.next;
        statement = this.visitStatement(ctx.getChild(4), local_attributes);

        /* IFSTAT.true = newLabel() */
        attributes.true = this.newLabel();
        /* IFSTAT.false = IFSTAT.next */
        attributes.false = attributes.next;
        /* IFSTAT.code = NUMEXPRESSION.code 
                         || if NUMEXPRESSION.addr goto IFSTAT.true
                         || goto label(IFSTAT.false)
                         || label(IFSTAT.true)
                         || STATEMENT.code */
        code = [
          numexpression.code,
          `if ${numexpression.addr} goto ${attributes.true}`,
          `goto ${attributes.false}`,
          `${attributes.true}:`,
          `${statement.code}\n`
        ].join("\n");

        return {
          code: code
        };

      /* IFSTAT -> ife ( NUMEXPRESSION ) STATEMENT else STATEMENT */
      case "Ife":
        numexpression = this.visitNumexpression(ctx.getChild(2));

        statement = [];
        /* STATEMENT‚ÇÅ.next = IFSTAT.next */
        local_attributes.next = attributes.next;
        statement[1] = this.visitStatement(ctx.getChild(4), local_attributes);

        local_attributes = {};

        /* STATEMENT‚ÇÇ.next = IFSTAT.next */
        local_attributes.next = attributes.next;
        statement[2] = this.visitStatement(ctx.getChild(6), local_attributes);

        /* IFSTAT.true = newLabel() */
        attributes.true = this.newLabel();
        /* IFSTAT.false = newLabel() */
        attributes.false = this.newLabel();
        /* IFSTAT.code = NUMEXPRESSION.code
                        || if NUMEXPRESSION.addr goto IFSTAT.true
                        || goto label(IFSTAT.false)
                        || label(IFSTAT.true)
                        || STATEMENT‚ÇÅ.code
                        || label(IFSTAT.false)
                        || STATEMENT‚ÇÇ.code */
        code = [
          numexpression.code,
          `if ${numexpression.addr} goto ${attributes.true}`,
          `goto ${attributes.false}`,
          `${attributes.true}:`,
          `${statement[1].code}`,
          `${attributes.false}:`,
          `${statement[2].code}\n`
        ].join("\n");

        return {
          code: code
        };
    }
  }
  visitReturnstat(ctx) {
    return { code: "goto end" };
  }

  /* NUMEXPRESSION -> TERM TERMS */
  visitNumexpression(ctx) {
    let local_attributes = {};
    let term = this.visitTerm(ctx.getChild(0));
    /* TERMS.inha = TERM.addr */
    local_attributes.inha = term.addr;
    /* TERMS.inhc = TERM.code */
    local_attributes.inhc = term.code;
    let terms = this.visitTerms(ctx.getChild(1), local_attributes);

    return {
      /* NUMEXPRESSION.addr = TERMS.addr */
      addr: terms.addr,
      /* NUMEXPRESSION.code = TERMS.code */
      code: terms.code
    };
  }

  /* TERM -> UNARYEXPR UNARYEXPRS */
  visitTerm(ctx) {
    let local_attributes = {};
    let unaryExpr = this.visitUnaryexpr(ctx.getChild(0));
    /* UNARYEXPRS.inha = UNARYEXPR.addr */
    local_attributes.inha = unaryExpr.addr;
    /* UNARYEXPRS.inhc = UNARYEXPR.code */
    local_attributes.inhc = unaryExpr.code;
    let unaryExprs = this.visitUnaryexprs(ctx.getChild(1), local_attributes);
    return {
      /* TERM.addr = UNARYEXPRS.addr */
      addr: unaryExprs.addr,
      /* TERM.code = UNARYEXPRS.code */
      code: unaryExprs.code
    };
  }

  visitTerms(ctx, attributes) {
    let local_attributes = {};
    let term, terms;
    switch (this.firstChild(ctx)) {
      /* TERMS -> + TERM TERMS */
      case "Plus":
        term = this.visitTerm(ctx.getChild(1));

        /* TERMS.addr = newTemporary() */
        attributes.addr = this.newTemporary();

        /* TERMS‚ÇÅ.inha = TERMS.addr */
        local_attributes.inha = attributes.addr;
        /* TERMS‚ÇÅ.inhc = TERMS.inhc
                         || TERM.code
                         || TERMS.addr '=' TERMS.inha '+' TERM.addr */
        local_attributes.inhc =
          `${attributes.inhc}` +
          `${term.code}\n` +
          `${attributes.addr} = ${attributes.inha} + ${term.addr}`;

        terms = this.visitTerms(ctx.getChild(2), local_attributes);

        return {
          /* TERMS.code = TERMS‚ÇÅ.code */
          code: terms.code,
          /* TERMS.addr = TERMS‚ÇÅ.addr */
          addr: terms.addr
        };

      /* TERMS -> - TERM TERMS */
      case "Minus":
        term = this.visitTerm(ctx.getChild(1));

        /* TERMS.addr = newTemporary() */
        attributes.addr = this.newTemporary();
        /* TERMS‚ÇÅ.inha = TERMS.addr */
        local_attributes.inha = attributes.addr;
        /* TERMS‚ÇÅ.inhc = TERMS.inhc
                         || TERM.code
                         || TERMS.addr '=' TERMS.inha '-' TERM.addr */
        local_attributes.inhc =
          `${attributes.inhc}` +
          `${term.code}\n` +
          `${attributes.addr} = ${attributes.inha} - ${term.addr}`;

        terms = this.visitTerms(ctx.getChild(2), local_attributes);

        return {
          /* TERMS.code = TERMS‚ÇÅ.code */
          code: terms.code,
          /* TERMS.addr = TERMS‚ÇÅ.addr */
          addr: terms.addr
        };

      /* TERMS -> ùùê */
      default:
        return {
          /* TERMS.addr = TERMS.inha */
          addr: attributes.inha,
          /* TERMS.code = TERMS.inhc */
          code: attributes.inhc
        };
    }
  }

  visitUnaryexpr(ctx) {
    let factor;
    switch (this.firstChild(ctx)) {
      /* UNARYEXPR -> - FACTOR */
      case "Minus":
        factor = this.visitFactor(ctx.getChild(1));

        let address = this.newTemporary();
        return {
          /* UNARYEXPR.addr = newTemporary() */
          addr: address,
          /* UNARYEXPR.code = UNARYEXPR.addr '=' minus FACTOR.addr */
          code: `${address} = minus ${factor.addr}`
        };

      /* UNARYEXPR -> + FACTOR */
      case "Plus":
        factor = this.visitFactor(ctx.getChild(1));
        return {
          /* UNARYEXPR.addr = FACTOR.addr */
          addr: factor.addr,
          /* UNARYEXPR.code = FACTOR.code */
          code: factor.code
        };

      /* UNARYEXPR -> FACTOR */
      case "factor":
        factor = this.visitFactor(ctx.getChild(0));
        return {
          /* UNARYEXPR.addr = FACTOR.addr */
          addr: factor.addr,
          /* UNARYEXPR.code = FACTOR.code */
          code: factor.code
        };
    }
  }

  visitUnaryexprs(ctx, attributes) {
    let local_attributes = {};
    let unaryExpr, unaryExprs;
    switch (this.firstChild(ctx)) {
      /* UNARYEXPRS -> * UNARYEXPR UNARYEXPRS‚ÇÅ */
      case "Star":
        unaryExpr = this.visitUnaryexpr(ctx.getChild(1));

        /* UNARYEXPRS.addr = newTemporary() */
        attributes.addr = this.newTemporary();
        /* UNARYEXPRS‚ÇÅ.inha = UNARYEXPRS.addr */
        local_attributes.inha = attributes.addr;
        /* UNARYEXPRS‚ÇÅ.inhc = UNARYEXPRS.inhc 
                              || UNARYEXPR.code
                              || UNARYEXPRS.addr '=' UNARYEXPRS.inha '*' UNARYEXPR.addr */
        local_attributes.inhc =
          `${attributes.inhc}` +
          `${unaryExpr.code}\n` +
          `${attributes.addr} = ${attributes.inha} * ${unaryExpr.addr}`;

        unaryExprs = this.visitUnaryexprs(ctx.getChild(2), local_attributes);

        return {
          /* UNARYEXPRS.addr = UNARYEXPRS‚ÇÅ.addr */
          addr: unaryExprs.addr,
          /* UNARYEXPRS.code = UNARYEXPRS‚ÇÅ.code */
          code: unaryExprs.code
        };

      /* UNARYEXPRS -> / UNARYEXPR UNARYEXPRS‚ÇÅ */
      case "Div":
        unaryExpr = this.visitUnaryexpr(ctx.getChild(1));

        /* UNARYEXPRS.addr = newTemporary() */
        attributes.addr = this.newTemporary();
        /* UNARYEXPRS‚ÇÅ.inha = UNARYEXPRS.addr */
        local_attributes.inha = attributes.addr;
        /* UNARYEXPRS‚ÇÅ.inhc = UNARYEXPRS.inhc 
                              || UNARYEXPR.code
                              || UNARYEXPRS.addr '=' UNARYEXPRS.inha '/' UNARYEXPR.addr */
        local_attributes.inhc =
          `${attributes.inhc}` +
          `${unaryExpr.code}\n` +
          `${attributes.addr} = ${attributes.inha} / ${unaryExpr.addr}`;
        unaryExprs = this.visitUnaryexprs(ctx.getChild(2), local_attributes);

        return {
          /* UNARYEXPRS.addr = UNARYEXPRS‚ÇÅ.addr */
          addr: unaryExprs.addr,
          /* UNARYEXPRS.code = UNARYEXPRS‚ÇÅ.code */
          code: unaryExprs.code
        };

      /* UNARYEXPRS -> % UNARYEXPR UNARYEXPRS‚ÇÅ */
      case "Mod":
        unaryExpr = this.visitUnaryexpr(ctx.getChild(1));

        /* UNARYEXPRS.addr = newTemporary() */
        attributes.addr = this.newTemporary();
        /* UNARYEXPRS‚ÇÅ.inha = UNARYEXPRS.addr */
        local_attributes.inha = attributes.addr;
        /* UNARYEXPRS‚ÇÅ.inhc = UNARYEXPRS.inhc 
                              || UNARYEXPR.code
                              || UNARYEXPRS.addr '=' UNARYEXPRS.inha '%' UNARYEXPR.addr */
        local_attributes.inhc =
          `${attributes.inhc}` +
          `${unaryExpr.code}\n` +
          `${attributes.addr} = ${attributes.inha} % ${unaryExpr.addr}`;
        unaryExprs = this.visitUnaryexprs(ctx.getChild(2), local_attributes);

        return {
          /* UNARYEXPRS.addr = UNARYEXPRS‚ÇÅ.addr */
          addr: unaryExprs.addr,
          /* UNARYEXPRS.code = UNARYEXPRS‚ÇÅ.code */
          code: unaryExprs.code
        };

      /* UNARYEXPRS -> ùùê */
      default:
        return {
          /* UNARYEXPRS.addr = UNARYEXPRS.inha */
          addr: attributes.inha,
          /* UNARYEXPRS.code = UNARYEXPRS.inhc */
          code: attributes.inhc
        };
    }
  }

  visitFactor(ctx) {
    switch (this.firstChild(ctx)) {
      case "IntConstant":
        return { addr: ctx.getText(), code: "" };
      case "StringConstant":
        return { addr: ctx.getText(), code: "" };
      case "Null":
      case "Identifier":
      case "LeftParen":
      default:
        return;
    }
  }
}

module.exports = Visitor;
