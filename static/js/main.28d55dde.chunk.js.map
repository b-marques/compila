{"version":3,"sources":["logo.svg","actions/index.js","actions/ActionType.js","components/ImportFromFileBodyComponent.js","components/Main.js","components/App.js","reducers/analyserReducer.js","reducers/index.js","serviceWorker.js","logic/lexical.js","logic/syntactic.js","logic/sdtExpsDec.js","logic/syntacticExpsDec.js","Shape.js","index.js"],"names":["module","exports","__webpack_require__","p","updateCode","text","type","codeAnalysis","symbol_table","codeAnalysisExpsDec","connect","state","analyser","analyserReducer","dispatch","bindActionCreators","withStyles","theme","button","margin","spacing","unit","width","input","display","withTheme","props","fileReader","classes","handleFileRead","e","content","result","react_default","a","createElement","accept","className","id","multiple","onChange","file","undefined","target","files","FileReader","onloadend","readAsText","htmlFor","Button_default","variant","component","color","Main","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkForGraph","viz","Viz","Module","render","tree","syntacticExpsDec","syntax_tree","console","log","_this$buildGraphTrans","buildGraphTransitions","transitions","slicedToArray","graph","concat","renderSVGElement","then","element","document","getElementById","childElementCount","appendChild","item","replaceChild","childNodes","catch","err","ll1_analysis","tabNumber","node","myid","value","left","_this$buildGraphTrans3","_this$buildGraphTrans4","right","_this$buildGraphTrans5","_this$buildGraphTrans6","center","_this$buildGraphTrans7","_this$buildGraphTrans8","_this2","AppBar_default","position","Toolbar_default","src","logo","alt","Tabs_default","setState","indicatorColor","textColor","centered","Tab_default","label","Grid_default","container","xs","md","Paper_default","paper","components_ImportFromFileBodyComponent","TextField_default","multiline","lexical","preventDefault","textField","placeholder","Table_default","table","TableHead_default","TableRow_default","TableCell_default","TableBody_default","error_table","map","key","line","column","detail","syntactic","message","line_number","onClick","slice","Typography_default","tokenListCellTitle","symbolTableCellTitle","style","height","tokenListCell","token","symbolTableCell","scope","lexeme","title","Divider_default","printTree","printThreeAddressCode","printDeclarations","size","React","Component","defineProperty","borderLeft","padding","breakpoints","up","backgroundColor","align","borderRight","App","components_Main","arguments","length","action","newState","assign","processInput","analysis","analyserApp","combineReducers","Boolean","window","location","hostname","match","Lexical","reserved_stuff","alphabet","Set","states","finals","possible_finals","initial","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","symbol","to","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","File","FileList","Blob","alert","reset_ids","forward","lexeme_begin","column_number","toConsumableArray","was_final","possible_final","has","info","push","extractInfo","filter","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","ids","Syntactic","T","N","P","head","prods","S","first","follow","each","compute_first_set","compute_follow_set","parsing_table","build_parsing_table","stack","is_ll1","old_first","add_terminals_epsilon","_loop","rule","prod","production","add","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_loop2","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","i","next_production","chained_epsilon","forEach","_iterator5","first_has_changed","old_follow","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_loop3","A","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","entries","_ref3","_ref2","B","Beta","index","BetaFirst","get_first","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","delete","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","follow_A","_iterator9","follow_has_changed","FirstBeta","has_epsilon","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","as","bs","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","equal_sets","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_this3","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","b","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_loop4","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","_iteratorNormalCompletion25","_didIteratorError25","_iteratorError25","_step25","_iterator25","_iterator19","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","_iteratorNormalCompletion26","_didIteratorError26","_iteratorError26","_step26","_iterator26","JSON","parse","stringify","stack_symbol","pop","input_element","shift","unshift","items","_iteratorNormalCompletion27","_didIteratorError27","_iteratorError27","_step27","_iterator27","prod1","prod2","setAlpha","setBeta","firstAlpha","firstBeta","is_disjoint","setA","setB","_intersection","_iteratorNormalCompletion28","_didIteratorError28","_iteratorError28","_step28","_iterator28","elem","addActionsToProds","new_production","objectified_production","name","production_to_object","is_equal","splice","actions","lexval","auxtype","ident","decl_table","array","n","codeaux","syn","code","inh","SyntacticExpsDec","includes","lexemeAux","printNode","stringOutput","threeAddressCode","tempName","_this$threeAddressCod","_this$threeAddressCod2","_this$threeAddressCod3","_this$threeAddressCod4","_this$threeAddressCod5","_this$threeAddressCod6","output","aux","Number","initial_shape","Synctatic","store","createStore","reducer","ReactDOM","es","components_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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AAKH,MAAO,cAAeZ,OAAQ,qBAC7C,CAAEe,OAAQ,IAAKH,MAAO,cAAeZ,OAAQ,SAC7C,CAAEe,OAAQ,IAAKH,MAAO,cAAeZ,OAAQ,OAC7C,CAAEe,OAAQ,IAAKH,MAAO,QAASZ,OAAQ,aACvC,CAAEe,OAAQ,KAAMH,MAAO,QAASZ,OAAQ,mBACxC,CAAEe,OAAQ,IAAKH,MAAO,QAASZ,OAAQ,gBACvC,CAAEe,OAAQ,KAAMH,MAAO,QAASZ,OAAQ,sBACxC,CAAEe,OAAQ,KAAMH,MAAO,QAASZ,OAAQ,SACxC,CAAEe,OAAQ,KAAMH,MAAO,QAASZ,OAAQ,aACxC,CAAEe,OAAQ,IAAKH,MAAO,aAAcZ,OAAQ,KAG9CpF,KAAKsI,SAAW,IAAIC,IAAI,CACtB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MAEFvI,KAAKwI,OAAS,IAAID,IAAI,CACpB,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,IACA,aACA,MACA,cACA,eACA,UAEFvI,KAAKyI,OAAS,IAAIF,IAAI,CACpB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,KACA,IACA,KACA,KACA,IACA,IACA,aACA,MACA,iBAGFvI,KAAK0I,gBAAkB,IAAIH,IAAI,CAAC,IAAK,gBACrCvI,KAAK2I,QAAU,KA/LE,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAA7J,EAAA,IAkMjB,QAAA8J,EAAAC,EAAkBhJ,KAAKwI,OAAvBS,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA+B,KAAtB1L,EAAsB6L,EAAA3G,MAC7BpC,KAAKgB,YAAY9D,GAAS,GADG,IAAAmM,GAAA,EAAAC,GAAA,EAAAC,OAAAtK,EAAA,IAE7B,QAAAuK,EAAAC,EAAmBzJ,KAAKsI,SAAxBW,OAAAC,cAAAG,GAAAG,EAAAC,EAAAN,QAAAC,MAAAC,GAAA,EAAkC,KAAzBK,EAAyBF,EAAApH,MAChCpC,KAAKgB,YAAY9D,GAAOwM,GAAU,CAAEC,GAAI,IAAIpB,IAAI,CAAC,YAHtB,MAAAxG,GAAAuH,GAAA,EAAAC,EAAAxH,EAAA,YAAAsH,GAAA,MAAAI,EAAAG,QAAAH,EAAAG,SAAA,WAAAN,EAAA,MAAAC,KAlMd,MAAAxH,GAAA8G,GAAA,EAAAC,EAAA/G,EAAA,YAAA6G,GAAA,MAAAI,EAAAY,QAAAZ,EAAAY,SAAA,WAAAf,EAAA,MAAAC,GA0MjB9I,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,GAAK,IAAIpB,IAAI,CAAC,eAC1CvI,KAAKgB,YAAL,KAA4B2I,G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oC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAAoC2I,GAAK,IAAIpB,IAAI,CAAC,eAClDvI,KAAKgB,YAAL,aAA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","file":"static/js/main.28d55dde.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ad3d725a.svg\";","/*\n *  @file index.js\n *\n *  @author Bruno Marques do Nascimento\n *  @date 23/04/2019\n *  @version 1.0\n */\n\nimport * as actionType from \"./ActionType\";\n\nexport const updateCode = text => ({\n  type: actionType.UPDATE_CODE,\n  text: text\n});\n\nexport const codeAnalysis = symbol_table => ({\n  type: actionType.CODE_ANALYSIS,\n  symbol_table: symbol_table\n});\n\nexport const codeAnalysisExpsDec = symbol_table => ({\n  type: actionType.CODE_ANALYSIS_EXPS_DEC,\n  symbol_table: symbol_table\n});\n","/*\n *  @file ActionType.js\n *\n *  @author Bruno Marques do Nascimento\n *  @date 23/04/2019\n *  @version 1.0\n */\n\nexport const UPDATE_CODE = \"UPDATE_CODE\";\nexport const CODE_ANALYSIS = \"CODE_ANALYSIS\";\nexport const CODE_ANALYSIS_EXPS_DEC = \"CODE_ANALYSIS_EXPS_DEC\";\n","/*\n *  @file ImportFromFileComponent.js\n *\n *  @author Bruno Marques do Nascimento\n *  @date 23/04/2019\n *  @version 1.0\n */\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport { updateCode } from \"../actions\";\nimport Button from \"@material-ui/core/Button\";\n\nconst styles = theme => ({\n  button: {\n    margin: theme.spacing.unit,\n    width: \"98%\"\n  },\n  input: {\n    display: \"none\"\n  }\n});\n\nconst ImportFromFileBodyComponent = props => {\n  const { classes } = props;\n  let fileReader;\n\n  const handleFileRead = e => {\n    const content = fileReader.result;\n    props.updateCode(content);\n  };\n\n  const handleFileChosen = file => {\n    if (file !== undefined) {\n      fileReader = new FileReader();\n      fileReader.onloadend = handleFileRead;\n      fileReader.readAsText(file);\n    }\n  };\n\n  return (\n    <div>\n      <input\n        accept=\".xpp\"\n        className={classes.input}\n        id=\"contained-button-file\"\n        multiple\n        type=\"file\"\n        onChange={e => handleFileChosen(e.target.files[0])}\n      />\n      <label htmlFor=\"contained-button-file\">\n        <Button\n          variant=\"contained\"\n          component=\"span\"\n          className={classes.button}\n          color=\"primary\"\n        >\n          SELECT LOCAL FILE\n        </Button>\n      </label>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({ analyser: state.analyserReducer });\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      updateCode\n    },\n    dispatch\n  );\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles, { withTheme: true })(ImportFromFileBodyComponent));\n","/*\n *  @file Main.js\n *\n *  @author Bruno Marques do Nascimento\n *  @date 23/04/2019\n *  @version 1.0\n */\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport { updateCode, codeAnalysis, codeAnalysisExpsDec } from \"../actions\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Divider from \"@material-ui/core/Divider\";\n\nimport Grid from \"@material-ui/core/Grid\";\n\nimport Button from \"@material-ui/core/Button\";\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport logo from \"../logo.svg\";\nimport ImportFromFileBodyComponent from \"./ImportFromFileBodyComponent.js\";\n\nimport Viz from \"viz.js\";\nimport { Module, render } from \"viz.js/full.render.js\";\n\nlet PADDING_SIZE = \"10px\";\n\nconst styles = theme => ({\n  textField: {\n    width: \"98%\",\n    margin: theme.spacing.unit\n  },\n  paper: {\n    margin: theme.spacing.unit\n  },\n  title: {\n    display: \"none\",\n    borderLeft: \"0.1em solid #225378\",\n    padding: theme.spacing.unit,\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"block\"\n    }\n  },\n  logo: {\n    // backgroundColor: \"white\",\n    margin: theme.spacing.unit\n  },\n  symbolTableCell: {\n    backgroundColor: \"#f9c29f\",\n    padding: PADDING_SIZE,\n    align: \"center\"\n  },\n  symbolTableCellTitle: {\n    backgroundColor: \"#fa792c\",\n    padding: PADDING_SIZE\n  },\n  tokenListCellTitle: {\n    backgroundColor: \"#3954ae\",\n    color: \"white\",\n    padding: PADDING_SIZE\n  },\n  tokenListCell: {\n    borderRight: \"0.1em solid gray\",\n    padding: PADDING_SIZE,\n    backgroundColor: \"#c6dcff\"\n  }\n});\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ll1_analysis: true, tabNumber: 0 };\n  }\n\n  buildGraphTransitions(node, transitions, id) {\n    let myid = id;\n    transitions += `\"${myid}\" [label=\"${node.value}\"];`;\n    if (node.left) {\n      transitions += `\"${myid}\" -> \"${id + 1}\";`;\n      [transitions, id] = this.buildGraphTransitions(\n        node.left,\n        transitions,\n        id + 1\n      );\n    }\n    if (node.right) {\n      transitions += `\"${myid}\" -> \"${id + 1}\";`;\n      [transitions, id] = this.buildGraphTransitions(\n        node.right,\n        transitions,\n        id + 1\n      );\n    }\n    if (node.center) {\n      transitions += `\"${myid}\" -> \"${id + 1}\";`;\n      [transitions, id] = this.buildGraphTransitions(\n        node.center,\n        transitions,\n        id + 1\n      );\n    }\n    return [transitions, id];\n  }\n\n  checkForGraph = () => {\n    const viz = new Viz({ Module, render });\n    let tree = this.props.analyser.syntacticExpsDec.syntax_tree;\n    console.log(tree);\n\n    let [transitions] = this.buildGraphTransitions(tree, \"\", 1);\n\n    let graph = `digraph G {size=\"8.5\"; node [style=filled,color=white];\n${transitions}}`;\n    // rankdir=TD;\n    // size=\"8,5\"\n    // node [shape = point]; start\n    // node [shape = doublecircle];\n    // ${[...fa.finals].join(\" \")}\n    // node [shape = circle];\n    // start -> ${fa.initial}\n    // ${transitions}\n\n    viz\n      .renderSVGElement(graph)\n      .then(function(element) {\n        let count = document.getElementById(\"graphCard\").childElementCount;\n        if (count === 0) {\n          document.getElementById(\"graphCard\").appendChild(element);\n        } else {\n          let item = document.getElementById(\"graphCard\");\n          item.replaceChild(element, item.childNodes[0]);\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className=\"root\">\n        <AppBar position=\"static\" color=\"default\">\n          <Toolbar>\n            <img src={logo} alt=\"logo\" width=\"200px\" className={classes.logo} />\n            {/* <Typography variant=\"h6\" color=\"inherit\" className={classes.title}> */}\n            {/* Lexical Analysis */}\n            {/* </Typography> */}\n          </Toolbar>\n        </AppBar>\n        <Tabs\n          value={this.state.tabNumber}\n          onChange={(e, value) => this.setState({ tabNumber: value })}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          centered\n        >\n          <Tab label=\"LL1X++\" />\n          <Tab label=\"EXPS and DEC\" />\n        </Tabs>\n\n        {this.state.tabNumber === 0 && (\n          <Grid container spacing={0}>\n            <Grid item xs={12} md={4}>\n              <Paper className={classes.paper}>\n                <ImportFromFileBodyComponent />\n              </Paper>\n              <Paper className={classes.paper}>\n                <TextField\n                  id=\"outlined-multiline-flexible\"\n                  label=\"Input your code here...\"\n                  multiline\n                  value={this.props.analyser.lexical.input}\n                  onChange={e => {\n                    e.preventDefault();\n                    this.props.updateCode(e.target.value);\n                  }}\n                  className={classes.textField}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  placeholder=\"\"\n                />\n              </Paper>\n              <Paper className={classes.paper}>\n                <Table className={classes.table}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Lexical Error (Line number)</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {this.props.analyser.lexical.error_table.map(\n                      (element, id) => {\n                        return (\n                          <TableRow key={id}>\n                            <TableCell>{`Line: ${element.line} | Column: ${\n                              element.column\n                            } | Lexeme: ${element.detail}`}</TableCell>\n                          </TableRow>\n                        );\n                      }\n                    )}\n                  </TableBody>\n                </Table>\n              </Paper>\n              <Paper className={classes.paper}>\n                <Table className={classes.table}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Info</TableCell>\n                      <TableCell>Line Number</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {this.props.analyser.syntactic.result.map((element, id) => {\n                      return (\n                        <TableRow key={id}>\n                          <TableCell>{element.message}</TableCell>\n                          <TableCell>{element.line_number}</TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.button}\n                  onClick={e => {\n                    e.preventDefault();\n                    this.props.codeAnalysis(\n                      this.props.analyser.lexical.symbol_table.slice(0)\n                    );\n                  }}\n                >\n                  <Typography color=\"inherit\" variant=\"subtitle1\">\n                    Syntactic Analysis\n                  </Typography>\n                </Button>\n              </Paper>\n            </Grid>\n            <Grid item xs={12} md={8}>\n              <Paper className={classes.paper}>\n                <Table className={classes.table}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell className={classes.tokenListCellTitle}>\n                        Token List\n                      </TableCell>\n                      <TableCell className={classes.symbolTableCellTitle}>\n                        ID\n                      </TableCell>\n                      <TableCell className={classes.symbolTableCellTitle}>\n                        Detail\n                      </TableCell>\n                      <TableCell className={classes.symbolTableCellTitle}>\n                        Lexeme\n                      </TableCell>\n                      <TableCell className={classes.symbolTableCellTitle}>\n                        Line\n                      </TableCell>\n                      <TableCell className={classes.symbolTableCellTitle}>\n                        Column\n                      </TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {this.props.analyser.lexical.symbol_table.map(\n                      (element, id) => {\n                        return (\n                          <TableRow key={id} style={{ height: 25 }}>\n                            <TableCell className={classes.tokenListCell}>\n                              {element.token}\n                            </TableCell>\n                            <TableCell className={classes.symbolTableCell}>\n                              {element.id}\n                            </TableCell>\n                            <TableCell className={classes.symbolTableCell}>\n                              {element.detail}\n                            </TableCell>\n                            <TableCell\n                              component=\"th\"\n                              scope=\"row\"\n                              className={classes.symbolTableCell}\n                            >\n                              {element.lexeme}\n                            </TableCell>\n                            <TableCell className={classes.symbolTableCell}>\n                              {element.line}\n                            </TableCell>\n                            <TableCell className={classes.symbolTableCell}>\n                              {element.column}\n                            </TableCell>\n                          </TableRow>\n                        );\n                      }\n                    )}\n                  </TableBody>\n                </Table>\n              </Paper>\n            </Grid>\n          </Grid>\n        )}\n        {this.state.tabNumber === 1 && (\n          <Grid container spacing={0}>\n            <Grid item xs={12} md={6}>\n              <Paper className={classes.paper}>\n                <ImportFromFileBodyComponent />\n              </Paper>\n              <Paper className={classes.paper}>\n                <TextField\n                  id=\"outlined-multiline-flexible\"\n                  label=\"Input your code here...\"\n                  multiline\n                  value={this.props.analyser.lexical.input}\n                  onChange={e => {\n                    e.preventDefault();\n                    this.props.updateCode(e.target.value);\n                  }}\n                  className={classes.textField}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  placeholder=\"\"\n                />\n              </Paper>\n              <Paper className={classes.paper}>\n                <Table className={classes.table}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Lexical Error (Line number)</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {this.props.analyser.lexical.error_table.map(\n                      (element, id) => {\n                        return (\n                          <TableRow key={id}>\n                            <TableCell>{`Line: ${element.line} | Column: ${\n                              element.column\n                            } | Lexeme: ${element.detail}`}</TableCell>\n                          </TableRow>\n                        );\n                      }\n                    )}\n                  </TableBody>\n                </Table>\n              </Paper>\n              <Paper className={classes.paper}>\n                <Table className={classes.table}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Info</TableCell>\n                      <TableCell>Line Number</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {this.props.analyser.syntacticExpsDec.result.map(\n                      (element, id) => {\n                        return (\n                          <TableRow key={id}>\n                            <TableCell>{element.message}</TableCell>\n                            <TableCell>{element.line_number}</TableCell>\n                          </TableRow>\n                        );\n                      }\n                    )}\n                  </TableBody>\n                </Table>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.button}\n                  onClick={e => {\n                    e.preventDefault();\n                    this.props.codeAnalysisExpsDec(\n                      this.props.analyser.lexical.symbol_table.slice(0)\n                    );\n                  }}\n                >\n                  <Typography color=\"inherit\" variant=\"subtitle1\">\n                    Syntactic Analysis\n                  </Typography>\n                </Button>\n              </Paper>\n              <Paper className={classes.paper}>\n                <Typography variant=\"h6\" className={classes.title}>\n                  Graphical Representation (EXPS Syntax Tree)\n                </Typography>\n                <Divider />\n                <Typography variant=\"h6\" className={classes.title}>\n                  <div id=\"graphCard\">{this.checkForGraph()}</div>\n                </Typography>\n              </Paper>\n\n              <Paper className={classes.paper}>\n                <Typography variant=\"h6\" className={classes.tokenListCell}>\n                  Inline Representation (Postorder)\n                </Typography>\n                <Divider />\n                <div id=\"inlineSyntaxTree\" className={classes.tokenListCell}>\n                  {this.props.analyser.syntacticExpsDec.printTree()}\n                </div>\n              </Paper>\n\n              <Paper className={classes.paper}>\n                <Typography variant=\"h6\" className={classes.symbolTableCell}>\n                  Three Addres Code\n                </Typography>\n                <Divider />\n                <div id=\"threeAddressCode\" className={classes.symbolTableCell}>\n                  {this.props.analyser.syntacticExpsDec\n                    .printThreeAddressCode()[0]\n                    .map((e, id) => (\n                      <p key={id}>{e}</p>\n                    ))}\n                </div>\n              </Paper>\n\n              <Paper className={classes.paper}>\n                <Typography variant=\"h6\" className={classes.title}>\n                  Bytes to be reserved\n                </Typography>\n                <Divider />\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>ID</TableCell>\n                      <TableCell>TYPE</TableCell>\n                      <TableCell>SIZE (bytes)</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {this.props.analyser.syntacticExpsDec\n                      .printDeclarations()\n                      .map((e, id) => (\n                        <TableRow key={id}>\n                          <TableCell>{e.id}</TableCell>\n                          <TableCell>{e.type}</TableCell>\n                          <TableCell>{e.size}</TableCell>\n                        </TableRow>\n                      ))}\n                  </TableBody>\n                </Table>\n              </Paper>\n            </Grid>\n            <Grid item xs={12} md={6}>\n              <Paper className={classes.paper}>\n                <Table className={classes.table}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell className={classes.tokenListCellTitle}>\n                        Token List\n                      </TableCell>\n                      <TableCell className={classes.symbolTableCellTitle}>\n                        ID\n                      </TableCell>\n                      <TableCell className={classes.symbolTableCellTitle}>\n                        Detail\n                      </TableCell>\n                      <TableCell className={classes.symbolTableCellTitle}>\n                        Lexeme\n                      </TableCell>\n                      <TableCell className={classes.symbolTableCellTitle}>\n                        Line\n                      </TableCell>\n                      <TableCell className={classes.symbolTableCellTitle}>\n                        Column\n                      </TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {this.props.analyser.lexical.symbol_table.map(\n                      (element, id) => {\n                        return (\n                          <TableRow key={id} style={{ height: 25 }}>\n                            <TableCell className={classes.tokenListCell}>\n                              {element.token}\n                            </TableCell>\n                            <TableCell className={classes.symbolTableCell}>\n                              {element.id}\n                            </TableCell>\n                            <TableCell className={classes.symbolTableCell}>\n                              {element.detail}\n                            </TableCell>\n                            <TableCell\n                              component=\"th\"\n                              scope=\"row\"\n                              className={classes.symbolTableCell}\n                            >\n                              {element.lexeme}\n                            </TableCell>\n                            <TableCell className={classes.symbolTableCell}>\n                              {element.line}\n                            </TableCell>\n                            <TableCell className={classes.symbolTableCell}>\n                              {element.column}\n                            </TableCell>\n                          </TableRow>\n                        );\n                      }\n                    )}\n                  </TableBody>\n                </Table>\n              </Paper>\n            </Grid>\n          </Grid>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({ analyser: state.analyserReducer });\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      updateCode,\n      codeAnalysis,\n      codeAnalysisExpsDec\n    },\n    dispatch\n  );\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withStyles(styles, { withTheme: true })(Main));\n","/*\n *  @file App.js\n *\n *  @author Bruno Marques do Nascimento\n *  @date 23/04/2019\n *  @version 1.0\n */\n\nimport React from \"react\";\nimport Main from \"./Main.js\";\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <Main />\n    </div>\n  );\n};\nexport default App;\n","/*\n *  @file analyserReducer.js\n *\n *  @author Bruno Marques do Nascimento\n *  @date 23/04/2019\n *  @version 1.0\n */\n\nimport * as actionType from \"../actions/ActionType\";\n\nconst analyserReducer = (state = 0, action) => {\n  let newState = Object.assign({}, state);\n\n  switch (action.type) {\n    case actionType.UPDATE_CODE:\n      newState.lexical.processInput(action.text);\n      return newState;\n\n    case actionType.CODE_ANALYSIS:\n      newState.syntactic.analysis(action.symbol_table);\n      return newState;\n\n    case actionType.CODE_ANALYSIS_EXPS_DEC:\n      newState.syntacticExpsDec.analysis(action.symbol_table);\n      return newState;\n\n    default:\n      return newState;\n  }\n};\nexport default analyserReducer;\n","/*\n *  @file index.js\n *\n *  @author Bruno Marques do Nascimento\n *  @date 23/04/2019\n *  @version 1.0\n */\n\nimport { combineReducers } from \"redux\";\nimport analyserReducer from \"./analyserReducer\";\n\nconst analyserApp = combineReducers({\n  analyserReducer\n});\n\nexport default analyserApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*\n *  @file lexical.js\n *\n *  @author Bruno Marques do Nascimento\n *  @date 23/04/2019\n *  @version 1.0\n */\n\nexport default class Lexical {\n  constructor(input) {\n    this.id = 1; /** Atributo ID da tabela de símbolo */\n    this.input = input; /** Texto lido do arquivo fornecido */\n    this.symbol_table = [];\n    this.error_table = [];\n    this.transitions = [];\n\n    /** Estrutura contendo palavras reservadas e tokens padrões */\n    this.reserved_stuff = [\n      { lexeme: \"ife\", token: \"RW\", detail: \"\" },\n      { lexeme: \"method\", token: \"RW\", detail: \"\" },\n      { lexeme: \"class\", token: \"RW\", detail: \"\" },\n      { lexeme: \"extends\", token: \"RW\", detail: \"\" },\n      { lexeme: \"int\", token: \"RW\", detail: \"\" },\n      { lexeme: \"string\", token: \"RW\", detail: \"\" },\n      { lexeme: \"constructor\", token: \"RW\", detail: \"\" },\n      { lexeme: \"break\", token: \"RW\", detail: \"\" },\n      { lexeme: \"print\", token: \"RW\", detail: \"\" },\n      { lexeme: \"read\", token: \"RW\", detail: \"\" },\n      { lexeme: \"return\", token: \"RW\", detail: \"\" },\n      { lexeme: \"super\", token: \"RW\", detail: \"\" },\n      { lexeme: \"if\", token: \"RW\", detail: \"\" },\n      { lexeme: \"else\", token: \"RW\", detail: \"\" },\n      { lexeme: \"for\", token: \"RW\", detail: \"\" },\n      { lexeme: \"new\", token: \"RW\", detail: \"\" },\n      { lexeme: \"null\", token: \"RW\", detail: \"\" },\n      { lexeme: \"*\", token: \"ARITOP\", detail: \"Multiplication\" },\n      { lexeme: \"/\", token: \"ARITOP\", detail: \"Division\" },\n      { lexeme: \"%\", token: \"ARITOP\", detail: \"Modulo\" },\n      { lexeme: \"+\", token: \"ARITOP\", detail: \"Addition\" },\n      { lexeme: \"-\", token: \"ARITOP\", detail: \"Subtraction\" },\n      { lexeme: \"{\", token: \"PUNCTUATION\", detail: \"Left Brace\" },\n      { lexeme: \"}\", token: \"PUNCTUATION\", detail: \"Right Brace\" },\n      { lexeme: \";\", token: \"PUNCTUATION\", detail: \"Semicolon\" },\n      { lexeme: \"[\", token: \"PUNCTUATION\", detail: \"Left Bracket\" },\n      { lexeme: \"]\", token: \"PUNCTUATION\", detail: \"Right Bracket\" },\n      { lexeme: \"(\", token: \"PUNCTUATION\", detail: \"Left parenthesis\" },\n      { lexeme: \")\", token: \"PUNCTUATION\", detail: \"Right parenthesis\" },\n      { lexeme: \",\", token: \"PUNCTUATION\", detail: \"Comma\" },\n      { lexeme: \".\", token: \"PUNCTUATION\", detail: \"Dot\" },\n      { lexeme: \"<\", token: \"RELOP\", detail: \"Less than\" },\n      { lexeme: \"<=\", token: \"RELOP\", detail: \"Less Equal than\" },\n      { lexeme: \">\", token: \"RELOP\", detail: \"Greater than\" },\n      { lexeme: \">=\", token: \"RELOP\", detail: \"Greater Equal than\" },\n      { lexeme: \"==\", token: \"RELOP\", detail: \"Equal\" },\n      { lexeme: \"!=\", token: \"RELOP\", detail: \"Not Equal\" },\n      { lexeme: \"=\", token: \"ASSIGNMENT\", detail: \"\" }\n    ];\n\n    this.alphabet = new Set([\n      \"a\",\n      \"b\",\n      \"c\",\n      \"d\",\n      \"e\",\n      \"f\",\n      \"g\",\n      \"h\",\n      \"i\",\n      \"j\",\n      \"k\",\n      \"l\",\n      \"m\",\n      \"n\",\n      \"o\",\n      \"p\",\n      \"q\",\n      \"r\",\n      \"s\",\n      \"t\",\n      \"u\",\n      \"v\",\n      \"w\",\n      \"x\",\n      \"y\",\n      \"z\",\n      \"A\",\n      \"B\",\n      \"C\",\n      \"D\",\n      \"E\",\n      \"F\",\n      \"G\",\n      \"H\",\n      \"I\",\n      \"J\",\n      \"K\",\n      \"L\",\n      \"M\",\n      \"N\",\n      \"O\",\n      \"P\",\n      \"Q\",\n      \"R\",\n      \"S\",\n      \"T\",\n      \"U\",\n      \"V\",\n      \"W\",\n      \"X\",\n      \"Y\",\n      \"Z\",\n      \"0\",\n      \"1\",\n      \"2\",\n      \"3\",\n      \"4\",\n      \"5\",\n      \"6\",\n      \"7\",\n      \"8\",\n      \"9\",\n      \"*\",\n      \"/\",\n      \"%\",\n      \"+\",\n      \"-\",\n      \";\",\n      \"(\",\n      \")\",\n      \"{\",\n      \"}\",\n      \"[\",\n      \"]\",\n      \"<\",\n      \">\",\n      \"=\",\n      \"!\",\n      \".\",\n      \",\",\n      '\"',\n      \" \"\n    ]);\n    this.states = new Set([\n      \"q0\",\n      \"*\",\n      \"/\",\n      \"%\",\n      \"+\",\n      \"-\",\n      \";\",\n      \"(\",\n      \")\",\n      \"{\",\n      \"}\",\n      \"[\",\n      \"]\",\n      \"<\",\n      \"<=\",\n      \">\",\n      \">=\",\n      \"=\",\n      \"==\",\n      \"!\",\n      \"!=\",\n      \",\",\n      \".\",\n      \"identifier\",\n      \"num\",\n      \"string-open\",\n      \"string-close\",\n      \"error\"\n    ]);\n    this.finals = new Set([\n      \"*\",\n      \"/\",\n      \"%\",\n      \"+\",\n      \"-\",\n      \";\",\n      \"(\",\n      \")\",\n      \"{\",\n      \"}\",\n      \"[\",\n      \"]\",\n      \"<\",\n      \"<=\",\n      \">\",\n      \">=\",\n      \"=\",\n      \"==\",\n      \"!=\",\n      \",\",\n      \".\",\n      \"identifier\",\n      \"num\",\n      \"string-close\"\n    ]);\n    /** Estados que não são finais, mas podem vir a ser */\n    this.possible_finals = new Set([\"!\", \"string-open\"]);\n    this.initial = \"q0\";\n\n    /** Inicializa todas as transições do automato como erro */\n    for (let state of this.states) {\n      this.transitions[state] = [];\n      for (let symbol of this.alphabet) {\n        this.transitions[state][symbol] = { to: new Set([\"error\"]) };\n      }\n    }\n\n    /** Definição das transições a partir do estado inicial */\n    this.transitions[\"q0\"][\"a\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"b\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"c\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"d\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"e\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"f\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"g\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"h\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"i\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"j\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"k\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"l\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"m\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"n\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"o\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"p\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"q\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"r\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"s\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"t\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"u\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"v\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"w\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"x\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"y\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"z\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"A\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"B\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"C\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"D\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"E\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"F\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"G\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"H\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"I\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"J\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"K\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"L\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"M\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"N\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"O\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"P\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"Q\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"R\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"S\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"T\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"U\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"V\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"W\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"X\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"Y\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"Z\"].to = new Set([\"identifier\"]);\n    this.transitions[\"q0\"][\"0\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"1\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"2\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"3\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"4\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"5\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"6\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"7\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"8\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"9\"].to = new Set([\"num\"]);\n    this.transitions[\"q0\"][\"*\"].to = new Set([\"*\"]);\n    this.transitions[\"q0\"][\"/\"].to = new Set([\"/\"]);\n    this.transitions[\"q0\"][\"%\"].to = new Set([\"%\"]);\n    this.transitions[\"q0\"][\"+\"].to = new Set([\"+\"]);\n    this.transitions[\"q0\"][\"-\"].to = new Set([\"-\"]);\n    this.transitions[\"q0\"][\";\"].to = new Set([\";\"]);\n    this.transitions[\"q0\"][\"(\"].to = new Set([\"(\"]);\n    this.transitions[\"q0\"][\")\"].to = new Set([\")\"]);\n    this.transitions[\"q0\"][\"{\"].to = new Set([\"{\"]);\n    this.transitions[\"q0\"][\"}\"].to = new Set([\"}\"]);\n    this.transitions[\"q0\"][\"[\"].to = new Set([\"[\"]);\n    this.transitions[\"q0\"][\"]\"].to = new Set([\"]\"]);\n    this.transitions[\"q0\"][\"<\"].to = new Set([\"<\"]);\n    this.transitions[\"q0\"][\">\"].to = new Set([\">\"]);\n    this.transitions[\"q0\"][\"=\"].to = new Set([\"=\"]);\n    this.transitions[\"q0\"][\"!\"].to = new Set([\"!\"]);\n    this.transitions[\"q0\"][\".\"].to = new Set([\".\"]);\n    this.transitions[\"q0\"][\",\"].to = new Set([\",\"]);\n\n    /** Definição das transições de operações relacionais */\n    this.transitions[\"<\"][\"=\"].to = new Set([\"<=\"]);\n    this.transitions[\">\"][\"=\"].to = new Set([\">=\"]);\n    this.transitions[\"=\"][\"=\"].to = new Set([\"==\"]);\n    this.transitions[\"!\"][\"=\"].to = new Set([\"!=\"]);\n\n    /** Definição das transições de identificadores */\n    this.transitions[\"identifier\"][\"a\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"b\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"c\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"d\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"e\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"f\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"g\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"h\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"i\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"j\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"k\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"l\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"m\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"n\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"o\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"p\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"q\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"r\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"s\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"t\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"u\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"v\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"w\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"x\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"y\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"z\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"A\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"B\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"C\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"D\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"E\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"F\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"G\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"H\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"I\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"J\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"K\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"L\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"M\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"N\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"O\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"P\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"Q\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"R\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"S\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"T\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"U\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"V\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"W\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"X\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"Y\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"Z\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"0\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"1\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"2\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"3\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"4\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"5\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"6\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"7\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"8\"].to = new Set([\"identifier\"]);\n    this.transitions[\"identifier\"][\"9\"].to = new Set([\"identifier\"]);\n\n    /** Definição das transições para reconhecimento de números (int-constant) */\n    this.transitions[\"num\"][\"0\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\"1\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\"2\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\"3\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\"4\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\"5\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\"6\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\"7\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\"8\"].to = new Set([\"num\"]);\n    this.transitions[\"num\"][\"9\"].to = new Set([\"num\"]);\n    this.transitions[\"-\"][\"0\"].to = new Set([\"num\"]);\n    this.transitions[\"-\"][\"1\"].to = new Set([\"num\"]);\n    this.transitions[\"-\"][\"2\"].to = new Set([\"num\"]);\n    this.transitions[\"-\"][\"3\"].to = new Set([\"num\"]);\n    this.transitions[\"-\"][\"4\"].to = new Set([\"num\"]);\n    this.transitions[\"-\"][\"5\"].to = new Set([\"num\"]);\n    this.transitions[\"-\"][\"6\"].to = new Set([\"num\"]);\n    this.transitions[\"-\"][\"7\"].to = new Set([\"num\"]);\n    this.transitions[\"-\"][\"8\"].to = new Set([\"num\"]);\n    this.transitions[\"-\"][\"9\"].to = new Set([\"num\"]);\n\n    /** Definição das transições para reconhecimento de strings */\n    this.transitions[\"q0\"]['\"'].to = new Set([\"string-open\"]);\n    for (let symbol of this.alphabet) {\n      this.transitions[\"string-open\"][symbol] = {\n        to: new Set([\"string-open\"])\n      };\n    }\n    this.transitions[\"string-open\"]['\"'].to = new Set([\"string-close\"]);\n\n    /** Verifica o suporte a API de arquivos. */\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\n      /** Great success! All the File APIs are supported. */\n    } else {\n      alert(\"The File APIs are not fully supported in this browser.\");\n    }\n  }\n\n  /** Função responsável por processar o arquivo de entrada */\n  processInput(input) {\n    this.reset_ids();\n    this.input = input;\n    let lexeme = \"\";\n    let forward = 0;\n    let state = \"q0\";\n    let has_char = true;\n    let line_number = 0;\n    let lexeme_begin = 0;\n    let column_number = 0;\n\n    /** Executa enquanto houver caracteres para serem lidos */\n    while (has_char) {\n      state = \"q0\";\n      /** Verifica se existem caracteres para serem lidos  */\n      if (this.input === undefined || this.input[forward] === undefined) break;\n\n      /** Se o caractere for \"\\n\" é realizado o skip para o próximo caractere */\n      if (this.input[forward] === \"\\n\") {\n        forward++;\n        lexeme_begin = forward;\n        line_number++;\n        column_number = 0;\n\n        /** Se o caractere for \" \" é realizado o skip para o próximo caractere */\n      } else if (this.input[forward] === \" \") {\n        forward++;\n        lexeme_begin = forward;\n        column_number++;\n\n        /** Se o caractere transitar para estados de erro  */\n      } else if (\n        this.transitions[state][this.input[forward]] === undefined ||\n        [...this.transitions[state][this.input[forward]].to][0] === \"error\"\n      ) {\n        lexeme = this.input[forward];\n        state = \"error\";\n\n        /** Se for outro caractere válido será realizado seu processamento */\n      } else {\n        let was_final = false;\n        let possible_final = false;\n\n        do {\n          state = [...this.transitions[state][this.input[forward]].to][0];\n          if (state === \"string-open\") {\n            do {\n              forward++;\n              column_number++;\n              /** Controle de quebra de linha */\n              if (this.input[forward] === \"\\n\") {\n                column_number = 0;\n                line_number++;\n              }\n            } while (\n              this.input[forward] !== undefined &&\n              this.input[forward] !== '\"'\n            );\n            lexeme = this.input.slice(lexeme_begin, forward + 1);\n            if (this.input[forward] === '\"') {\n              state = \"string-close\";\n            } else {\n              state = \"error\";\n            }\n            break;\n          } else {\n            if (this.finals.has(state)) {\n              possible_final = false;\n              was_final = true;\n            } else if (this.possible_finals.has(state)) {\n              possible_final = true;\n              was_final = false;\n            }\n            column_number++;\n            forward++;\n          }\n        } while (\n          this.input[forward] !== undefined &&\n          this.transitions[state][this.input[forward]] !== undefined &&\n          [...this.transitions[state][this.input[forward]].to][0] !== \"error\"\n        );\n\n        if (was_final) {\n          lexeme = this.input.slice(lexeme_begin, forward);\n        } else if (possible_final) {\n          lexeme = this.input.slice(lexeme_begin, forward);\n          forward--;\n          column_number--;\n          state = \"error\";\n        }\n      }\n      let info;\n\n      /** Switch-Case responsável por definir as ações conforme o estado final\n       * do automato após a extração de um lexema. */\n      switch (state) {\n        /** Estado de ERRO */\n        case \"error\":\n          this.error_table.push({\n            line: line_number,\n            column: column_number,\n            detail: lexeme\n          });\n          forward++;\n          column_number++;\n          lexeme_begin = forward;\n          break;\n        /** Estado de identificação de um NÚMERO */\n        case \"num\":\n          this.symbol_table.push({\n            id: this.id++,\n            lexeme: lexeme,\n            token: \"NUM\",\n            detail: \"\",\n            line: line_number,\n            column: column_number - lexeme.length\n          });\n          lexeme_begin = forward;\n          break;\n\n        /** Estado de identificação de uma STRING */\n        case \"string-close\":\n          this.symbol_table.push({\n            id: this.id++,\n            lexeme: lexeme,\n            token: \"STRING\",\n            detail: \"\",\n            line: line_number,\n            column: column_number\n          });\n          forward++;\n          column_number++;\n          lexeme_begin = forward;\n          break;\n\n        /** Estado INICIAL */\n        case \"q0\":\n          // DO NOTHING\n          break;\n\n        /** Estado de identificação de um IDENTIFICADOR (ID ou RW) */\n        case \"identifier\":\n          info = this.extractInfo(info, lexeme);\n          if (info.length === 0) {\n            this.symbol_table.push({\n              id: this.id++,\n              lexeme: lexeme,\n              token: \"ID\",\n              detail: \"\",\n              line: line_number,\n              column: column_number - lexeme.length\n            });\n            lexeme_begin = forward;\n          } else {\n            this.symbol_table.push({\n              id: this.id++,\n              token: info[0].token,\n              lexeme: info[0].lexeme,\n              detail: info[0].detail,\n              line: line_number,\n              column: column_number - lexeme.length\n            });\n          }\n          break;\n\n        /** OUTROS */\n        default:\n          info = this.extractInfo(info, state);\n          this.symbol_table.push({\n            id: this.id++,\n            token: info[0].token,\n            lexeme: info[0].lexeme,\n            detail: info[0].detail,\n            line: line_number,\n            column: column_number - lexeme.length\n          });\n          lexeme_begin = forward;\n          break;\n      }\n    }\n  }\n\n  extractInfo(info, lexeme) {\n    info = this.reserved_stuff.filter(e => e.lexeme === lexeme);\n    return info;\n  }\n\n  reset_ids() {\n    for (let each of this.reserved_stuff) {\n      each.ids = [];\n    }\n    this.symbol_table = [];\n    this.error_table = [];\n    this.id = 1;\n  }\n}\n","/*\n *  @file syntactic.js\n *\n *  @author Bruno Marques do Nascimento\n *  @date 18/06/2019\n *  @version 1.0\n */\n\nexport default class Syntactic {\n  constructor() {\n    this.T = new Set([\n      \"ife\",\n      \"method\",\n      \"ident\",\n      \"int-constant\",\n      \"string-constant\",\n      \"class\",\n      \"extends\",\n      \"int\",\n      \"string\",\n      \"constructor\",\n      \"break\",\n      \"print\",\n      \"read\",\n      \"return\",\n      \"super\",\n      \"if\",\n      \"else\",\n      \"for\",\n      \"new\",\n      \"null\",\n      \"*\",\n      \"/\",\n      \"%\",\n      \"+\",\n      \"-\",\n      \"{\",\n      \"}\",\n      \";\",\n      \"[\",\n      \"]\",\n      \"(\",\n      \")\",\n      \",\",\n      \".\",\n      \"<\",\n      \"<=\",\n      \">\",\n      \">=\",\n      \"==\",\n      \"!=\",\n      \"=\"\n    ]);\n\n    this.N = new Set([\n      \"PROGRAM\",\n      \"CLASSLIST\",\n      \"CLASSLISTB\",\n      \"CLASSDECL\",\n      \"CLASSBODY\",\n      \"CLASSBODYB\",\n      \"VARDECLS\",\n      \"CONSTRUCTDECLS\",\n      \"METHODDECLS\",\n      \"TYPE\",\n      \"VARDECL\",\n      \"BRACKETS\",\n      \"MULTIVARDECL\",\n      \"VARDECLCOMMA\",\n      \"CONSTRUCTDECL\",\n      \"METHODDECL\",\n      \"METHODBODY\",\n      \"PARAMLIST\",\n      \"MULTIPARAM\",\n      \"STATEMENT\",\n      \"ATRIBSTAT\",\n      \"ATRIBSTATB\",\n      \"PRINTSTAT\",\n      \"READSTAT\",\n      \"RETURNSTAT\",\n      \"RETURNSTATB\",\n      \"SUPERSTAT\",\n      \"IFSTAT\",\n      \"FORSTAT\",\n      \"INSIDEFOR\",\n      \"INSIDEFORB\",\n      \"INSIDEFORC\",\n      \"STATLIST\",\n      \"STATLISTB\",\n      \"LVALUE\",\n      \"LVALUEB\",\n      \"ALOCEXPRESSION\",\n      \"ALOCEXPRESSIONB\",\n      \"ALOCEXPRESSIONC\",\n      \"EXPRESSIONS\",\n      \"EXPRESSIONSB\",\n      \"EXPRESSION\",\n      \"EXPRESSIONB\",\n      \"NUMEXPRESSION\",\n      \"TERMS\",\n      \"TERM\",\n      \"UNARYEXPRS\",\n      \"UNARYEXPR\",\n      \"FACTOR\",\n      \"ARGLIST\",\n      \"ARGLISTS\",\n      \"VARORATRIB\"\n    ]);\n\n    this.P = [\n      {\n        head: \"PROGRAM\",\n        prods: [[\"&\"], [\"CLASSLIST\"]]\n      },\n      {\n        head: \"CLASSLIST\",\n        prods: [[\"class\", \"ident\", \"CLASSDECL\", \"CLASSLISTB\"]]\n      },\n      {\n        head: \"CLASSLISTB\",\n        prods: [[\"&\"], [\"CLASSLIST\"]]\n      },\n      {\n        head: \"CLASSDECL\",\n        prods: [[\"extends\", \"ident\", \"CLASSBODY\"], [\"CLASSBODY\"]]\n      },\n\n      {\n        head: \"CLASSBODY\",\n        prods: [[\"{\", \"CLASSBODYB\"]]\n      },\n      {\n        head: \"CLASSBODYB\",\n        prods: [\n          [\"CLASSLIST\", \"VARDECLS\", \"CONSTRUCTDECLS\", \"METHODDECLS\", \"}\"],\n          [\"VARDECLS\", \"CONSTRUCTDECLS\", \"METHODDECLS\", \"}\"]\n        ]\n      },\n      {\n        head: \"VARDECLS\",\n        prods: [[\"&\"], [\"VARDECL\", \";\", \"VARDECLS\"]]\n      },\n      {\n        head: \"CONSTRUCTDECLS\",\n        prods: [[\"&\"], [\"CONSTRUCTDECL\", \"CONSTRUCTDECLS\"]]\n      },\n      {\n        head: \"METHODDECLS\",\n        prods: [[\"&\"], [\"METHODDECL\", \"METHODDECLS\"]]\n      },\n      {\n        head: \"TYPE\",\n        prods: [[\"int\"], [\"string\"], [\"ident\"]]\n      },\n      {\n        head: \"VARDECL\",\n        prods: [[\"TYPE\", \"ident\", \"BRACKETS\", \"MULTIVARDECL\"]]\n      },\n      {\n        head: \"BRACKETS\",\n        prods: [[\"&\"], [\"[\", \"]\", \"BRACKETS\"]]\n      },\n      {\n        head: \"MULTIVARDECL\",\n        prods: [[\"&\"], [\"VARDECLCOMMA\", \"MULTIVARDECL\"]]\n      },\n      {\n        head: \"VARDECLCOMMA\",\n        prods: [[\",\", \"ident\", \"BRACKETS\"]]\n      },\n      {\n        head: \"CONSTRUCTDECL\",\n        prods: [[\"constructor\", \"METHODBODY\"]]\n      },\n      {\n        head: \"METHODDECL\",\n        prods: [[\"method\", \"TYPE\", \"BRACKETS\", \"ident\", \"METHODBODY\"]]\n      },\n      {\n        head: \"METHODBODY\",\n        prods: [[\"(\", \"PARAMLIST\", \")\", \"STATEMENT\"]]\n      },\n      {\n        head: \"PARAMLIST\",\n        prods: [[\"&\"], [\"TYPE\", \"ident\", \"BRACKETS\", \"MULTIPARAM\"]]\n      },\n      {\n        head: \"MULTIPARAM\",\n        prods: [[\"&\"], [\",\", \"TYPE\", \"ident\", \"BRACKETS\", \"MULTIPARAM\"]]\n      },\n      {\n        head: \"STATEMENT\",\n        prods: [\n          [\"int\", \"ident\", \"BRACKETS\", \"MULTIVARDECL\", \";\"],\n          [\"string\", \"ident\", \"BRACKETS\", \"MULTIVARDECL\", \";\"],\n          [\"ident\", \"VARORATRIB\"],\n          [\"PRINTSTAT\", \";\"],\n          [\"READSTAT\", \";\"],\n          [\"RETURNSTAT\", \";\"],\n          [\"SUPERSTAT\", \";\"],\n          [\"IFSTAT\"],\n          [\"FORSTAT\"],\n          [\"{\", \"STATLIST\", \"}\"],\n          [\"break\", \";\"],\n          [\";\"]\n        ]\n      },\n      {\n        head: \"VARORATRIB\",\n        prods: [\n          [\"ident\", \"BRACKETS\", \"MULTIVARDECL\", \";\"],\n          [\"LVALUE\", \"=\", \"ATRIBSTATB\", \";\"]\n        ]\n      },\n      {\n        head: \"ATRIBSTAT\",\n        prods: [[\"ident\", \"LVALUE\", \"=\", \"ATRIBSTATB\"]]\n      },\n      {\n        head: \"ATRIBSTATB\",\n        prods: [[\"EXPRESSION\"], [\"ALOCEXPRESSION\"]]\n      },\n\n      {\n        head: \"PRINTSTAT\",\n        prods: [[\"print\", \"EXPRESSION\"]]\n      },\n      {\n        head: \"READSTAT\",\n        prods: [[\"read\", \"ident\", \"LVALUE\"]]\n      },\n      {\n        head: \"RETURNSTAT\",\n        prods: [[\"return\", \"RETURNSTATB\"]]\n      },\n      {\n        head: \"RETURNSTATB\",\n        prods: [[\"&\"], [\"EXPRESSION\"]]\n      },\n      {\n        head: \"SUPERSTAT\",\n        prods: [[\"super\", \"(\", \"ARGLIST\", \")\"]]\n      },\n      {\n        head: \"IFSTAT\",\n        prods: [\n          [\"if\", \"(\", \"EXPRESSION\", \")\", \"STATEMENT\"],\n          [\"ife\", \"(\", \"EXPRESSION\", \")\", \"STATEMENT\", \"else\", \"STATEMENT\"]\n        ]\n      },\n      {\n        head: \"FORSTAT\",\n        prods: [[\"for\", \"(\", \"INSIDEFOR\", \")\", \"STATEMENT\"]]\n      },\n      {\n        head: \"INSIDEFOR\",\n        prods: [[\"ATRIBSTAT\", \";\", \"INSIDEFORB\"], [\";\", \"INSIDEFORB\"]]\n      },\n\n      {\n        head: \"INSIDEFORB\",\n        prods: [[\";\", \"INSIDEFORC\"], [\"EXPRESSION\", \";\", \"INSIDEFORC\"]]\n      },\n\n      {\n        head: \"INSIDEFORC\",\n        prods: [[\"&\"], [\"ATRIBSTAT\"]]\n      },\n      {\n        head: \"STATLIST\",\n        prods: [[\"STATEMENT\", \"STATLISTB\"]]\n      },\n      {\n        head: \"STATLISTB\",\n        prods: [[\"&\"], [\"STATLIST\"]]\n      },\n      {\n        head: \"LVALUE\",\n        prods: [\n          [\"&\"],\n          [\"[\", \"EXPRESSION\", \"]\", \"LVALUE\"],\n          [\".\", \"ident\", \"LVALUEB\"]\n        ]\n      },\n\n      {\n        head: \"LVALUEB\",\n        prods: [[\"(\", \"ARGLIST\", \")\", \"LVALUE\"], [\"LVALUE\"]]\n      },\n\n      {\n        head: \"ALOCEXPRESSION\",\n        prods: [[\"new\", \"ALOCEXPRESSIONB\"]]\n      },\n      {\n        head: \"ALOCEXPRESSIONB\",\n        prods: [\n          [\"ident\", \"ALOCEXPRESSIONC\"],\n          [\"int\", \"EXPRESSIONS\"],\n          [\"string\", \"EXPRESSIONS\"]\n        ]\n      },\n\n      {\n        head: \"ALOCEXPRESSIONC\",\n        prods: [[\"(\", \"ARGLIST\", \")\"], [\"EXPRESSIONS\"]]\n      },\n\n      {\n        head: \"EXPRESSIONS\",\n        prods: [[\"[\", \"EXPRESSION\", \"]\", \"EXPRESSIONSB\"]]\n      },\n      {\n        head: \"EXPRESSIONSB\",\n        prods: [[\"&\"], [\"EXPRESSIONS\"]]\n      },\n      {\n        head: \"EXPRESSION\",\n        prods: [[\"NUMEXPRESSION\", \"EXPRESSIONB\"]]\n      },\n      {\n        head: \"EXPRESSIONB\",\n        prods: [\n          [\"&\"],\n          [\"<\", \"NUMEXPRESSION\"],\n          [\"<=\", \"NUMEXPRESSION\"],\n          [\">=\", \"NUMEXPRESSION\"],\n          [\">\", \"NUMEXPRESSION\"],\n          [\"==\", \"NUMEXPRESSION\"],\n          [\"!=\", \"NUMEXPRESSION\"]\n        ]\n      },\n      {\n        head: \"NUMEXPRESSION\",\n        prods: [[\"TERM\", \"TERMS\"]]\n      },\n      {\n        head: \"TERMS\",\n        prods: [[\"&\"], [\"+\", \"TERM\", \"TERMS\"], [\"-\", \"TERM\", \"TERMS\"]]\n      },\n      {\n        head: \"TERM\",\n        prods: [[\"UNARYEXPR\", \"UNARYEXPRS\"]]\n      },\n      {\n        head: \"UNARYEXPRS\",\n        prods: [\n          [\"&\"],\n          [\"*\", \"UNARYEXPR\", \"UNARYEXPRS\"],\n          [\"/\", \"UNARYEXPR\", \"UNARYEXPRS\"],\n          [\"%\", \"UNARYEXPR\", \"UNARYEXPRS\"]\n        ]\n      },\n\n      {\n        head: \"UNARYEXPR\",\n        prods: [[\"+\", \"FACTOR\"], [\"-\", \"FACTOR\"], [\"FACTOR\"]]\n      },\n\n      {\n        head: \"FACTOR\",\n        prods: [\n          [\"int-constant\"],\n          [\"string-constant\"],\n          [\"null\"],\n          [\"ident\", \"LVALUE\"],\n          [\"(\", \"EXPRESSION\", \")\"]\n        ]\n      },\n      {\n        head: \"ARGLIST\",\n        prods: [[\"&\"], [\"EXPRESSION\", \"ARGLISTS\"]]\n      },\n      {\n        head: \"ARGLISTS\",\n        prods: [[\"&\"], [\",\", \"EXPRESSION\", \"ARGLISTS\"]]\n      }\n    ];\n\n    this.S = \"PROGRAM\";\n    this.first = [];\n    this.follow = [];\n\n    for (let each of this.N) {\n      this.first[each] = new Set();\n      this.follow[each] = new Set();\n    }\n\n    this.compute_first_set();\n    this.compute_follow_set();\n\n    this.parsing_table = [];\n    this.build_parsing_table();\n    this.stack = [];\n    this.result = [{ message: \"\", line_number: \"\" }];\n\n    // console.log(this.first);\n    // console.log(this.follow);\n    // console.log(this.parsing_table);\n\n    console.log(`A gramatática é LL(1)? ${this.is_ll1()}`);\n  }\n\n  compute_first_set() {\n    let old_first = [];\n    let add_terminals_epsilon = false;\n    while (true) {\n      for (let each of this.N) {\n        old_first[each] = new Set([...this.first[each]]);\n      }\n\n      if (!add_terminals_epsilon) {\n        for (let head of this.N) {\n          let rule = this.P.filter(prod => prod.head === head);\n          for (let production of rule[0].prods) {\n            // If is a terminal or epsilon add to first set of head\n            if (this.T.has(production[0]) || production[0] === \"&\") {\n              this.first[head].add(production[0]);\n            }\n          }\n        }\n        add_terminals_epsilon = true;\n      }\n      for (let head of this.N) {\n        let rule = this.P.filter(prod => prod.head === head);\n        for (let production of rule[0].prods) {\n          // If is non terminal\n          if (this.N.has(production[0])) {\n            // If first symbol is non terminal and first set has something\n            if (this.first[production[0]].size !== 0) {\n              for (let each of this.first[production[0]]) {\n                if (each === \"&\") {\n                  let i = 1;\n                  let next_production = production[i];\n                  let chained_epsilon = true;\n                  while (next_production !== undefined) {\n                    if (this.T.has(next_production)) {\n                      this.first[head].add(next_production);\n                      chained_epsilon = false;\n                      break;\n                    } else if (this.first[next_production].has(\"&\")) {\n                      this.first[next_production].forEach(e => {\n                        if (e !== \"&\") this.first[head].add(e);\n                      });\n                    } else {\n                      this.first[next_production].forEach(e =>\n                        this.first[head].add(e)\n                      );\n                      chained_epsilon = false;\n                      break;\n                    }\n                    i++;\n                    next_production = production[i];\n                  }\n                  if (chained_epsilon) this.first[head].add(\"&\");\n                  continue;\n                }\n                this.first[head].add(each);\n              }\n            }\n          }\n        }\n      }\n      if (!this.first_has_changed(old_first)) break;\n    }\n  }\n  compute_follow_set() {\n    // 1 – Se A é o símbolo inicial da gramática -> $ ∈ Follow(A)\n    this.follow[this.S].add(\"$\");\n\n    while (true) {\n      let old_follow = [];\n      for (let each of this.N) {\n        old_follow[each] = new Set([...this.follow[each]]);\n      }\n\n      for (let A of this.N) {\n        let rule = this.P.filter(prod => prod.head === A);\n        for (let production of rule[0].prods) {\n          for (const [i, element] of production.entries()) {\n            if (this.N.has(element)) {\n              let B = element;\n              let Beta = new Set();\n              let index = i + 1;\n              while (production[index] !== undefined) {\n                Beta.add(production[index]);\n                index++;\n              }\n              let BetaFirst = Beta.size > 0 ? this.get_first(Beta) : new Set();\n              // 2 – Se A -> α B β ∈ P ∧ β ≠ ε -> adicione first(β) em Follow(B)\n              if (Beta.size > 0) {\n                for (let each of BetaFirst) {\n                  this.follow[B].add(each);\n                }\n                this.follow[B].delete(\"&\");\n              }\n              // 3 – Se A -> αB (ou A->αBβ, onde ε ∈ First(β)) ∈ P -> adicione Follow(A) em Follow(B)\n              if (Beta.size === 0 || BetaFirst.has(\"&\")) {\n                for (let follow_A of this.follow[A]) {\n                  this.follow[B].add(follow_A);\n                }\n              }\n            }\n          }\n        }\n      }\n      if (!this.follow_has_changed(old_follow)) break;\n    }\n  }\n\n  get_first(Beta) {\n    if ([...Beta][0] === \"&\") return new Set(\"&\");\n    let FirstBeta = new Set();\n    let i = 0;\n    let has_epsilon = false;\n    while ([...Beta][i] !== undefined) {\n      if (this.T.has([...Beta][i])) {\n        FirstBeta.add([...Beta][i]);\n        has_epsilon = false;\n        break;\n      } else {\n        for (let each of this.first[[...Beta][i]]) {\n          FirstBeta.add(each);\n        }\n        if (this.first[[...Beta][i]].has(\"&\")) {\n          FirstBeta.delete(\"&\");\n          has_epsilon = true;\n        } else {\n          has_epsilon = false;\n          break;\n        }\n      }\n      i++;\n    }\n    if (has_epsilon) FirstBeta.add(\"&\");\n    return FirstBeta;\n  }\n\n  equal_sets(as, bs) {\n    if (as.size !== bs.size) return false;\n    for (var a of as) if (!bs.has(a)) return false;\n    return true;\n  }\n\n  follow_has_changed(old_follow) {\n    for (let each of this.N) {\n      if (!this.equal_sets(old_follow[each], this.follow[each])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  first_has_changed(old_first) {\n    for (let each of this.N) {\n      if (!this.equal_sets(old_first[each], this.first[each])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  build_parsing_table() {\n    for (let A of this.N) {\n      this.parsing_table[A] = [];\n      for (let b of this.T) {\n        this.parsing_table[A][b] = { prod: new Set() };\n      }\n      this.parsing_table[A][\"$\"] = { prod: new Set() };\n    }\n    for (let A of this.N) {\n      let rule = this.P.filter(prod => prod.head === A);\n      for (let production of rule[0].prods) {\n        if (production[0] === \"&\") {\n          for (let b of this.follow[A]) {\n            this.parsing_table[A][b].prod.add(\"&\");\n          }\n          if (this.follow[A].has(\"$\")) {\n            this.parsing_table[A][\"$\"].prod.add(\"&\");\n          }\n        } else {\n          for (let a of this.get_first(new Set(production))) {\n            if (a === \"&\") {\n              for (let b of this.follow[A]) {\n                this.parsing_table[A][b].prod.add(production);\n              }\n              if (this.follow[A].has(\"$\")) {\n                this.parsing_table[A][\"$\"].prod.add(\"&\");\n              }\n            } else {\n              this.parsing_table[A][a].prod.add(production);\n            }\n          }\n        }\n      }\n    }\n    // Set empty to error state\n    for (let A of this.N) {\n      if (!this.parsing_table[A][\"$\"].prod.size)\n        this.parsing_table[A][\"$\"].prod.add(\"<erro>\");\n      for (let b of this.T) {\n        if (!this.parsing_table[A][b].prod.size) {\n          this.parsing_table[A][b].prod.add(\"<erro>\");\n        }\n      }\n    }\n  }\n\n  analysis(symbol_table) {\n    /* Make a local copy of the symbol table */\n    this.symbol_table = JSON.parse(JSON.stringify(symbol_table));\n\n    /* Check if symbol table not empty */\n    if (!this.symbol_table.length) {\n      this.result[0].message = \"Empty symbol table!\";\n      this.result[0].line_number = \"\";\n      return;\n    }\n\n    /* Add símbolo $ e símbolo inicial à pilha */\n    this.stack = [\"$\", \"PROGRAM\"];\n\n    /* Add símbolo $ ao final da lista de tokens */\n    this.symbol_table.push({\n      id: this.symbol_table[this.symbol_table.length - 1].id + 1,\n      token: \"END\",\n      lexeme: \"$\",\n      detail: \"\",\n      line: this.symbol_table[this.symbol_table.length - 1].line\n    });\n\n    /* Loop de processamento da stack */\n    while (this.symbol_table.length > 0) {\n      console.log(this.stack);\n      let stack_symbol = this.stack.pop();\n      if (stack_symbol === \"&\") {\n        continue;\n      }\n\n      let input_element = this.symbol_table.shift();\n      if (stack_symbol === \"$\" && this.symbol_table.length) {\n        this.result[0].message = \"Syntactic error!\";\n        this.result[0].line_number = input_element.line;\n        return;\n      }\n\n      /* Mapeamento de id, num e string para os respectivos tokens */\n      switch (input_element.token) {\n        case \"ID\":\n          input_element.lexeme = \"ident\";\n          break;\n        case \"NUM\":\n          input_element.lexeme = \"int-constant\";\n          break;\n        case \"STRING\":\n          input_element.lexeme = \"string-constant\";\n          break;\n        default:\n          break;\n      }\n      console.log(input_element.lexeme);\n      /* Quando o símbolo do topo da pilha é igual ao próximo token,\n       * token é removido da pilha e da lista de tokens. Avança para a próxima iteração do loop. */\n      if (input_element.lexeme === stack_symbol) {\n        continue;\n      }\n\n      /* Se o símbolo da pilha não pertence aos não terminais: ERRO */\n      if (!this.N.has(stack_symbol)) {\n        this.result[0].message = \"Syntactic error!\";\n        this.result[0].line_number = input_element.line;\n        return;\n\n        /* Senão, se a transição na tabela preditiva entre simbolo da pilha e próximo token for para\n         * um estado de erro: ERRO */\n      } else if (\n        this.parsing_table[stack_symbol][input_element.lexeme].prod.has(\n          \"<erro>\"\n        )\n      ) {\n        this.result[0].message = \"Syntactic error!\";\n        this.result[0].line_number = input_element.line;\n        return;\n\n        /* Senão, devolve o token a lista de tokens e empilha os símbolos de acordo com a tabela preditiva */\n      } else {\n        this.symbol_table.unshift(input_element);\n\n        let items = [\n          ...this.parsing_table[stack_symbol][input_element.lexeme].prod\n        ][0];\n        let i = items.length;\n        while (i--) {\n          this.stack.push(items[i]);\n        }\n      }\n    }\n    this.result[0].message = \"Success!\";\n    this.result[0].line_number = \"\";\n    return;\n  }\n\n  /*\n   * A grammar G is LL(1) if and only if whenever A -> α | β\f are two distinct\n   * productions of G, the following conditions hold:\n   *\n   *   1. For no terminal a do both α and β\f\u000b derive strings beginning with a.\n   *   2. At most one of α and β\f\f can derive the empty string.\n   *   3. If β\f\f *⇒ ε, then α\u000b does not derive any string beginning with a terminal\n   *      in FOLLOW(A). Likewise, if \u000bα\u000b\f\f *⇒ ε, then β\f does not derive any string\n   *      beginning with a terminal in FOLLOW(A).\n   *\n   * The fi\frst two conditions are equivalent to the statement that FIRST(\u000bα) and\n   * FIRST(β\f) are disjoint sets. The third condition is equivalent to stating\n   * that if \u000fε is in FIRST(β\f), then FIRST(α\u000b) and FOLLOW(A) are disjoint sets,\n   * and likewise if ε\u000f is in FIRST(α\u000b).\n   *\n   * Alfred V. Aho. Compilers: Principles, Techniques, and Tools (2nd Edition)\n   */\n  is_ll1() {\n    let is_ll1 = true;\n\n    for (let production of this.P) {\n      for (let prod1 in production.prods) {\n        for (let prod2 in production.prods) {\n          if (prod1 !== prod2) {\n            /* Condições 1 e 2 */\n            let setAlpha = new Set(production.prods[prod1]);\n            let setBeta = new Set(production.prods[prod2]);\n            let firstAlpha = this.get_first(setAlpha);\n            let firstBeta = this.get_first(setBeta);\n            is_ll1 = is_ll1 && this.is_disjoint(firstAlpha, firstBeta);\n\n            /* Condição 3 */\n            if (firstBeta.has(\"&\")) {\n              is_ll1 =\n                is_ll1 &&\n                this.is_disjoint(firstAlpha, this.follow[production.head]);\n            }\n            if (firstAlpha.has(\"&\")) {\n              is_ll1 =\n                is_ll1 &&\n                this.is_disjoint(firstBeta, this.follow[production.head]);\n            }\n          }\n        }\n      }\n    }\n    return is_ll1;\n  }\n\n  is_disjoint(setA, setB) {\n    let _intersection = new Set();\n    for (let elem of setB) {\n      if (setA.has(elem)) {\n        _intersection.add(elem);\n      }\n    }\n    return _intersection.size === 0;\n  }\n}\n","/*\n *  @file sdtExpsDec.js\n *\n *  @author Bruno Marques do Nascimento\n *  @date 18/06/2019\n *  @version 1.0\n */\n\nexport default function addActionsToProds(head, production) {\n  let new_production = production_to_object(production);\n  switch (head.name) {\n    case \"PROGRAM\":\n      if (is_equal(production, [\"EXPS\", \";\", \"DEC\"])) {\n        // Insert Synthesize.EXPS into position 1\n        new_production.splice(1, 0, {\n          name: \"Synthesize.EXPS\",\n          actions(stack) {\n            /* PROGRAM.node = EXPS.node */\n            stack[stack.length - 3].node = this.node;\n          }\n        });\n      }\n      break;\n\n    case \"EXPS\":\n      if (is_equal(production, [\"NUMEXPRESSION\"])) {\n        new_production.push({\n          name: \"Synthesize.NUMEXPRESSION\",\n          actions(stack) {\n            /* EXPS.node = NUMEXPRESSION.node */\n            stack[stack.length - 1].node = this.node;\n          }\n        });\n      }\n      break;\n\n    case \"DEC\":\n      break;\n\n    case \"TYPE\":\n      if (is_equal(production, [\"int\"])) {\n        new_production[0] = {\n          name: \"int\",\n          actions(stack, lexval) {\n            /* TYPE.type = int.lexval */\n            stack[stack.length - 1].type = lexval;\n          }\n        };\n      }\n      if (is_equal(production, [\"string\"])) {\n        new_production[0] = {\n          name: \"string\",\n          actions(stack, lexval) {\n            /* TYPE.type = string.lexval */\n            stack[stack.length - 1].type = lexval;\n          }\n        };\n      }\n      if (is_equal(production, [\"ident\"])) {\n        new_production[0] = {\n          name: \"ident\",\n          actions(stack, lexval) {\n            /* TYPE.type = ident.lexval */\n            stack[stack.length - 1].type = lexval;\n          }\n        };\n      }\n      break;\n\n    case \"VARDECL\":\n      if (is_equal(production, [\"TYPE\", \"ident\", \"BRACKETS\", \"MULTIVARDECL\"])) {\n        new_production.splice(1, 0, {\n          name: \"Synthesize.TYPE\",\n          actions(stack) {\n            /* BRACKETS.auxtype = TYPE.type */\n            stack[stack.length - 2].auxtype = this.type;\n            /* MULTIVARDECL.auxtype = TYPE.type */\n            stack[stack.length - 4].auxtype = this.type;\n          }\n        });\n        new_production[2] = {\n          name: \"ident\",\n          actions(stack, lexval) {\n            /* Send id to Synthesize.BRACKETS to call addType() */\n            stack[stack.length - 2].ident = lexval;\n          }\n        };\n        new_production.splice(4, 0, {\n          name: \"Synthesize.BRACKETS\",\n          actions(stack, decl_table) {\n            /* addType(ident.id, BRACKETS.type) */\n            decl_table.push({ id: this.ident, type: this.type });\n          }\n        });\n      }\n      break;\n\n    case \"BRACKETS\":\n      if (is_equal(production, [\"[\", \"int-constant\", \"]\", \"BRACKETS\"])) {\n        new_production[1] = {\n          name: \"int-constant\",\n          actions(stack, lexval) {\n            /* Send lexval to Synthesize.BRACKETS to call array() */\n            stack[stack.length - 3].lexval = lexval;\n          }\n        };\n        new_production[3] = {\n          name: \"BRACKETS\",\n          /* BRACKETS₁.auxtype = BRACKETS.auxtype */\n          auxtype: head.auxtype\n        };\n        new_production.push({\n          name: \"Synthesize.BRACKETS\",\n          actions(stack, decl_table) {\n            /* BRACKETS.type = array( int-constant.lexval,  BRACKETS₁.type) */\n            stack[stack.length - 1].type = {\n              array: { n: this.lexval, type: this.type }\n            };\n          }\n        });\n      }\n      if (is_equal(production, [\"&\"])) {\n        new_production = [\n          {\n            name: \"&\",\n            auxtype: head.auxtype,\n            actions(stack) {\n              /* BRACKETS.type = BRACKETS.auxtype */\n              stack[stack.length - 1].type = this.auxtype;\n            }\n          }\n        ];\n      }\n      break;\n\n    case \"MULTIVARDECL\":\n      if (is_equal(production, [\"VARDECLCOMMA\", \"MULTIVARDECL\"])) {\n        new_production[0] = {\n          name: \"VARDECLCOMMA\",\n          /* VARDECLCOMMA.auxtype = MULTIVARDECL.auxtype */\n          auxtype: head.auxtype\n        };\n        new_production[1] = {\n          name: \"MULTIVARDECL\",\n          /* MULTIVARDECL₁.auxtype = MULTIVARDECL.auxtype */\n          auxtype: head.auxtype\n        };\n      }\n      break;\n\n    case \"VARDECLCOMMA\":\n      if (is_equal(production, [\",\", \"ident\", \"BRACKETS\"])) {\n        new_production[1] = {\n          name: \"ident\",\n          actions(stack, lexval) {\n            /* Send id to Synthesize.BRACKETS to call addType() */\n            stack[stack.length - 2].ident = lexval;\n          }\n        };\n        new_production[2] = {\n          name: \"BRACKETS\",\n          /* BRACKETS.auxtype = VARDECLCOMMA.auxtype */\n          auxtype: head.auxtype\n        };\n        new_production.push({\n          name: \"Synthesize.BRACKETS\",\n          actions(stack, decl_table) {\n            /* addType(ident.id, BRACKETS.type) */\n            decl_table.push({ id: this.ident, type: this.type });\n          }\n        });\n      }\n      break;\n\n    case \"LVALUE\":\n      if (is_equal(production, [\"[\", \"int-constant\", \"]\", \"LVALUE\"])) {\n        new_production[0] = {\n          name: \"[\",\n          /* LVALUE₁.codeaux = LVALUE.codeaux || '[' int-constant.lexval ']' */\n          codeaux: head.codeaux,\n          actions(stack, lexval) {\n            /* LVALUE₁.codeaux = LVALUE.codeaux || '[' int-constant.lexval ']' */\n            stack[stack.length - 1].codeaux = this.codeaux + lexval;\n          }\n        };\n        new_production[1] = {\n          name: \"int-constant\",\n          actions(stack, lexval) {\n            /* LVALUE₁.codeaux = LVALUE.codeaux || '[' int-constant.lexval ']' */\n            stack[stack.length - 1].codeaux = this.codeaux + lexval;\n          }\n        };\n        new_production[2] = {\n          name: \"]\",\n          actions(stack, lexval) {\n            /* LVALUE₁.codeaux = LVALUE.codeaux || '[' int-constant.lexval ']' */\n            stack[stack.length - 1].codeaux = this.codeaux + lexval;\n          }\n        };\n        new_production.push({\n          name: \"Synthesize.LVALUE\",\n          syn: \"\",\n          actions(stack) {\n            /* LVALUE.code = LVALUE₁.code */\n            stack[stack.length - 1].code = this.code;\n          }\n        });\n      }\n      if (is_equal(production, [\".\", \"ident\", \"LVALUEB\"])) {\n        new_production[0] = {\n          name: \".\",\n          /* LVALUEB.codeaux = LVALUE.codeaux || '.' ident.lexval */\n          codeaux: head.codeaux,\n          actions(stack, lexval) {\n            /* LVALUEB.codeaux = LVALUE.codeaux || '.' ident.lexval */\n            stack[stack.length - 1].codeaux = this.codeaux + lexval;\n          }\n        };\n        new_production[1] = {\n          name: \"ident\",\n          actions(stack, lexval) {\n            /* LVALUEB.codeaux = LVALUE.codeaux || '.' ident.lexval */\n            stack[stack.length - 1].codeaux = this.codeaux + lexval;\n          }\n        };\n      }\n      if (is_equal(production, [\"&\"])) {\n        new_production = [\n          {\n            name: \"&\",\n            codeaux: head.codeaux,\n            actions(stack) {\n              /* LVALUE.code = LVALUE.codeaux */\n              stack[stack.length - 1].code = this.codeaux;\n            }\n          }\n        ];\n      }\n      break;\n\n    case \"LVALUEB\":\n      if (is_equal(production, [\"(\", \"int-constant\", \")\", \"LVALUE\"])) {\n        new_production[0] = {\n          name: \"(\",\n          /* LVALUE.codeaux = LVALUEB.codeaux || '(' int-constant.lexval ')' */\n          codeaux: head.codeaux,\n          actions(stack, lexval) {\n            /* LVALUE.codeaux = LVALUEB.codeaux || '(' int-constant.lexval ')' */\n            stack[stack.length - 1].codeaux = this.codeaux + lexval;\n          }\n        };\n        new_production[1] = {\n          name: \"int-constant\",\n          actions(stack, lexval) {\n            /* LVALUE.codeaux = LVALUEB.codeaux || '(' int-constant.lexval ')' */\n            stack[stack.length - 1].codeaux = this.codeaux + lexval;\n          }\n        };\n        new_production[2] = {\n          name: \")\",\n          actions(stack, lexval) {\n            /* LVALUE.codeaux = LVALUEB.codeaux || '(' int-constant.lexval ')' */\n            stack[stack.length - 1].codeaux = this.codeaux + lexval;\n          }\n        };\n        new_production.push({\n          name: \"Synthesize.LVALUE\",\n          actions(stack) {\n            /* LVALUE.code = LVALUE₁.code */\n            stack[stack.length - 1].code = this.code;\n          }\n        });\n      }\n      if (is_equal(production, [\"LVALUE\"])) {\n        new_production = [\n          {\n            name: \"LVALUE\",\n            /* LVALUE.codeaux = LVALUEB.codeaux */\n            codeaux: head.codeaux\n          }\n        ];\n      }\n      break;\n\n    case \"NUMEXPRESSION\":\n      if (is_equal(production, [\"TERM\", \"TERMS\"])) {\n        new_production.splice(1, 0, {\n          name: \"Synthesize.TERM\",\n          actions(stack) {\n            /* TERMS.inh = TERM.node */\n            stack[stack.length - 1].inh = this.node;\n          }\n        });\n        new_production.push({\n          name: \"Synthesize.TERMS\",\n          actions(stack) {\n            /* NUMEXPRESSION.node = TERMS.syn */\n            stack[stack.length - 1].node = this.syn;\n          }\n        });\n      }\n      break;\n\n    case \"TERMS\":\n      if (is_equal(production, [\"+\", \"TERM\", \"TERMS\"])) {\n        /* TERMS₁.inh = new Node('+', TERMS.inh, TERM.node) */\n        new_production[2].inh = { value: \"+\", left: head.inh, right: \"\" };\n        new_production.splice(2, 0, {\n          name: \"Synthesize.TERM\",\n          actions(stack) {\n            /* TERMS₁.inh = new Node('+', TERMS.inh, TERM.node) */\n            stack[stack.length - 1].inh.right = this.node;\n          }\n        });\n        new_production.push({\n          name: \"Synthesize.TERMS\",\n          actions(stack) {\n            /* TERMS.syn = TERMS₁.syn */\n            stack[stack.length - 1].syn = this.syn;\n          }\n        });\n      }\n      if (is_equal(production, [\"-\", \"TERM\", \"TERMS\"])) {\n        /* TERMS₁.inh = new Node('-', TERMS.inh, TERM.node) */\n        new_production[2].inh = { value: \"-\", left: head.inh, right: \"\" };\n        new_production.splice(2, 0, {\n          name: \"Synthesize.TERM\",\n          actions(stack) {\n            /* TERMS₁.inh = new Node('-', TERMS.inh, TERM.node) */\n            stack[stack.length - 1].inh.right = this.node;\n          }\n        });\n        new_production.push({\n          name: \"Synthesize.TERMS\",\n          actions(stack) {\n            /* TERMS.syn = TERMS₁.syn */\n            stack[stack.length - 1].syn = this.syn;\n          }\n        });\n      }\n      if (is_equal(production, [\"&\"])) {\n        new_production = [\n          {\n            name: \"&\",\n            inh: head.inh,\n            actions(stack) {\n              /* TERMS.syn = TERMS.inh */\n              stack[stack.length - 1].syn = this.inh;\n            }\n          }\n        ];\n      }\n      break;\n\n    case \"TERM\":\n      if (is_equal(production, [\"UNARYEXPR\", \"UNARYEXPRS\"])) {\n        new_production.splice(1, 0, {\n          name: \"Synthesize.UNARYEXPR\",\n          actions(stack) {\n            /* UNARYEXPRS.inh = UNARYEXPR.node */\n            stack[stack.length - 1].inh = this.node;\n          }\n        });\n        new_production.push({\n          name: \"Synthesize.UNARYEXPRS\",\n          actions(stack) {\n            /* TERM.node = UNARYEXPRS.syn */\n            stack[stack.length - 1].node = this.syn;\n          }\n        });\n      }\n      break;\n\n    case \"UNARYEXPRS\":\n      if (is_equal(production, [\"*\", \"UNARYEXPR\", \"UNARYEXPRS\"])) {\n        /* UNARYEXPRS₁.inh = new Node('*', UNARYEXPRS.inh, UNARYEXPR.node) */\n        new_production[2].inh = { value: \"*\", left: head.inh, right: \"\" };\n        new_production.splice(2, 0, {\n          name: \"Synthesize.UNARYEXPR\",\n          actions(stack) {\n            /* UNARYEXPRS₁.inh = new Node('*', UNARYEXPRS.inh, UNARYEXPR.node) */\n            stack[stack.length - 1].inh.right = this.node;\n          }\n        });\n        new_production.push({\n          name: \"Synthesize.UNARYEXPRS\",\n          actions(stack) {\n            /* UNARYEXPRS.syn = UNARYEXPRS₁.syn */\n            stack[stack.length - 1].syn = this.syn;\n          }\n        });\n      }\n      if (is_equal(production, [\"/\", \"UNARYEXPR\", \"UNARYEXPRS\"])) {\n        /* UNARYEXPRS₁.inh = new Node('/', UNARYEXPRS.inh, UNARYEXPR.node) */\n        new_production[2].inh = { value: \"/\", left: head.inh, right: \"\" };\n        new_production.splice(2, 0, {\n          name: \"Synthesize.UNARYEXPR\",\n          actions(stack) {\n            /* UNARYEXPRS₁.inh = new Node('/', UNARYEXPRS.inh, UNARYEXPR.node) */\n            stack[stack.length - 1].inh.right = this.node;\n          }\n        });\n        new_production.push({\n          name: \"Synthesize.UNARYEXPRS\",\n          actions(stack) {\n            /* UNARYEXPRS.syn = UNARYEXPRS₁.syn */\n            stack[stack.length - 1].syn = this.syn;\n          }\n        });\n      }\n      if (is_equal(production, [\"%\", \"UNARYEXPR\", \"UNARYEXPRS\"])) {\n        /* UNARYEXPRS₁.inh = new Node('%', UNARYEXPRS.inh, UNARYEXPR.node) */\n        new_production[2].inh = { value: \"%\", left: head.inh, right: \"\" };\n        new_production.splice(2, 0, {\n          name: \"Synthesize.UNARYEXPR\",\n          actions(stack) {\n            /* UNARYEXPRS₁.inh = new Node('%', UNARYEXPRS.inh, UNARYEXPR.node) */\n            stack[stack.length - 1].inh.right = this.node;\n          }\n        });\n        new_production.push({\n          name: \"Synthesize.UNARYEXPRS\",\n          actions(stack) {\n            /* UNARYEXPRS.syn = UNARYEXPRS₁.syn */\n            stack[stack.length - 1].syn = this.syn;\n          }\n        });\n      }\n      if (is_equal(production, [\"&\"])) {\n        new_production = [\n          {\n            name: \"&\",\n            inh: head.inh,\n            actions(stack) {\n              /* UNARYEXPRS.syn = UNARYEXPRS.inh */\n              stack[stack.length - 1].syn = this.inh;\n            }\n          }\n        ];\n      }\n      break;\n\n    case \"UNARYEXPR\":\n      if (is_equal(production, [\"FACTOR\"])) {\n        new_production.push({\n          name: \"Synthesize.FACTOR\",\n          actions(stack) {\n            /* UNARYEXPR.node = FACTOR.syn */\n            stack[stack.length - 1].node = this.syn;\n          }\n        });\n      }\n      if (is_equal(production, [\"-\", \"FACTOR\"])) {\n        new_production.push({\n          name: \"Synthesize.FACTOR\",\n          actions(stack) {\n            /* UNARYEXPR.node = - FACTOR.syn */\n            stack[stack.length - 1].node = { value: \"minus\", center: this.syn };\n          }\n        });\n      }\n      if (is_equal(production, [\"+\", \"FACTOR\"])) {\n        new_production.push({\n          name: \"Synthesize.FACTOR\",\n          actions(stack) {\n            /* UNARYEXPR.node = + FACTOR.syn */\n            stack[stack.length - 1].node = this.syn;\n          }\n        });\n      }\n      break;\n\n    case \"FACTOR\":\n      if (is_equal(production, [\"int-constant\"])) {\n        new_production[0].actions = (stack, lexval) => {\n          /* FACTOR.syn = new Leaf(int-constant.lexval) */\n          stack[stack.length - 1].syn = { value: lexval };\n        };\n      }\n      if (is_equal(production, [\"string-constant\"])) {\n        new_production[0].actions = (stack, lexval) => {\n          /* FACTOR.syn = new Leaf(string-constant.lexval) */\n          stack[stack.length - 1].syn = { value: lexval };\n        };\n      }\n      if (is_equal(production, [\"null\"])) {\n        new_production[0].actions = (stack, lexval) => {\n          /* FACTOR.syn = new Leaf(null.lexval) */\n          stack[stack.length - 1].syn = { value: lexval };\n        };\n      }\n      if (is_equal(production, [\"ident\", \"LVALUE\"])) {\n        new_production[0].actions = (stack, lexval) => {\n          /* FACTOR.syn = new Leaf(LVALUE.code) */\n          stack[stack.length - 1].codeaux = lexval;\n        };\n        new_production.push({\n          name: \"Synthesize.LVALUE\",\n          actions(stack) {\n            /* FACTOR.syn = new Leaf(LVALUE.code) */\n            stack[stack.length - 1].syn = { value: this.code };\n          }\n        });\n      }\n      if (is_equal(production, [\"(\", \"NUMEXPRESSION\", \")\"])) {\n        new_production.splice(2, 0, {\n          name: \"Synthesize.NUMEXPRESSION\",\n          actions(stack) {\n            /* FACTOR.syn = NUMEXPRESSION.node */\n            stack[stack.length - 2].syn = this.node;\n          }\n        });\n      }\n      break;\n\n    default:\n      console.log(\n        \"Something went wrong when adding actions to build syntax tree.\"\n      );\n      break;\n  }\n  return new_production;\n}\n\nfunction is_equal(as, bs) {\n  if (as.length !== bs.length) return false;\n  for (var a in as) if (as[a] !== bs[a]) return false;\n  return true;\n}\n\nfunction production_to_object(production) {\n  let objectified_production = [];\n  for (let prod of production) {\n    objectified_production.push({ name: prod });\n  }\n  return objectified_production;\n}\n","/*\n *  @file syntacticExpsDec.js\n *\n *  @author Bruno Marques do Nascimento\n *  @date 18/06/2019\n *  @version 1.0\n */\n\nimport addActionsToProds from \"./sdtExpsDec.js\";\n\nexport default class SyntacticExpsDec {\n  constructor() {\n    this.T = new Set([\n      \"ident\",\n      \"int-constant\",\n      \"string-constant\",\n      \"int\",\n      \"string\",\n      \"null\",\n      \"*\",\n      \"/\",\n      \"%\",\n      \"+\",\n      \"-\",\n      \";\",\n      \"[\",\n      \"]\",\n      \"(\",\n      \")\",\n      \",\",\n      \".\"\n    ]);\n\n    this.N = new Set([\n      \"PROGRAM\",\n      \"DEC\",\n      \"EXPS\",\n      \"TYPE\",\n      \"VARDECL\",\n      \"BRACKETS\",\n      \"MULTIVARDECL\",\n      \"VARDECLCOMMA\",\n      \"LVALUE\",\n      \"LVALUEB\",\n      \"NUMEXPRESSION\",\n      \"TERMS\",\n      \"TERM\",\n      \"UNARYEXPRS\",\n      \"UNARYEXPR\",\n      \"FACTOR\"\n    ]);\n\n    this.P = [\n      {\n        head: \"PROGRAM\",\n        prods: [[\"&\"], [\"EXPS\", \";\", \"DEC\"]]\n      },\n      {\n        head: \"EXPS\",\n        prods: [[\"NUMEXPRESSION\"]]\n      },\n      {\n        head: \"DEC\",\n        prods: [[\"VARDECL\"]]\n      },\n      {\n        head: \"TYPE\",\n        prods: [[\"int\"], [\"string\"], [\"ident\"]]\n      },\n      {\n        head: \"VARDECL\",\n        prods: [[\"TYPE\", \"ident\", \"BRACKETS\", \"MULTIVARDECL\"]]\n      },\n      {\n        head: \"BRACKETS\",\n        prods: [[\"&\"], [\"[\", \"int-constant\", \"]\", \"BRACKETS\"]]\n      },\n      {\n        head: \"MULTIVARDECL\",\n        prods: [[\"&\"], [\"VARDECLCOMMA\", \"MULTIVARDECL\"]]\n      },\n      {\n        head: \"VARDECLCOMMA\",\n        prods: [[\",\", \"ident\", \"BRACKETS\"]]\n      },\n      {\n        head: \"LVALUE\",\n        prods: [\n          [\"&\"],\n          [\"[\", \"int-constant\", \"]\", \"LVALUE\"],\n          [\".\", \"ident\", \"LVALUEB\"]\n        ]\n      },\n      {\n        head: \"LVALUEB\",\n        prods: [[\"(\", \"int-constant\", \")\", \"LVALUE\"], [\"LVALUE\"]]\n      },\n      {\n        head: \"NUMEXPRESSION\",\n        prods: [[\"TERM\", \"TERMS\"]]\n      },\n      {\n        head: \"TERMS\",\n        prods: [[\"&\"], [\"+\", \"TERM\", \"TERMS\"], [\"-\", \"TERM\", \"TERMS\"]]\n      },\n      {\n        head: \"TERM\",\n        prods: [[\"UNARYEXPR\", \"UNARYEXPRS\"]]\n      },\n      {\n        head: \"UNARYEXPRS\",\n        prods: [\n          [\"&\"],\n          [\"*\", \"UNARYEXPR\", \"UNARYEXPRS\"],\n          [\"/\", \"UNARYEXPR\", \"UNARYEXPRS\"],\n          [\"%\", \"UNARYEXPR\", \"UNARYEXPRS\"]\n        ]\n      },\n      {\n        head: \"UNARYEXPR\",\n        prods: [[\"+\", \"FACTOR\"], [\"-\", \"FACTOR\"], [\"FACTOR\"]]\n      },\n      {\n        head: \"FACTOR\",\n        prods: [\n          [\"int-constant\"],\n          [\"string-constant\"],\n          [\"null\"],\n          [\"ident\", \"LVALUE\"],\n          [\"(\", \"NUMEXPRESSION\", \")\"]\n        ]\n      }\n    ];\n\n    this.S = \"PROGRAM\";\n    this.first = [];\n    this.follow = [];\n\n    for (let each of this.N) {\n      this.first[each] = new Set();\n      this.follow[each] = new Set();\n    }\n\n    this.compute_first_set();\n\n    this.compute_follow_set();\n\n    this.parsing_table = [];\n    this.build_parsing_table();\n    this.stack = [];\n    this.result = [{ message: \"\", line_number: \"\" }];\n    this.syntax_tree = {};\n    this.decl_table = [];\n    // console.log(this.first);\n    // console.log(this.follow);\n    // console.log(this.parsing_table);\n  }\n\n  compute_first_set(head) {\n    let old_first = [];\n    let add_terminals_epsilon = false;\n    while (true) {\n      for (let each of this.N) {\n        old_first[each] = new Set([...this.first[each]]);\n      }\n\n      if (!add_terminals_epsilon) {\n        for (let head of this.N) {\n          let rule = this.P.filter(prod => prod.head === head);\n          for (let production of rule[0].prods) {\n            // If is a terminal or epsilon add to first set of head\n            if (this.T.has(production[0]) || production[0] === \"&\") {\n              this.first[head].add(production[0]);\n            }\n          }\n        }\n        add_terminals_epsilon = true;\n      }\n      for (let head of this.N) {\n        let rule = this.P.filter(prod => prod.head === head);\n        for (let production of rule[0].prods) {\n          // If is non terminal\n          if (this.N.has(production[0])) {\n            // If first symbol is non terminal and first set has something\n            if (this.first[production[0]].size !== 0) {\n              for (let each of this.first[production[0]]) {\n                if (each === \"&\") {\n                  let i = 1;\n                  let next_production = production[i];\n                  let chained_epsilon = true;\n                  while (next_production !== undefined) {\n                    if (this.T.has(next_production)) {\n                      this.first[head].add(next_production);\n                      chained_epsilon = false;\n                      break;\n                    } else if (this.first[next_production].has(\"&\")) {\n                      this.first[next_production].forEach(e => {\n                        if (e !== \"&\") this.first[head].add(e);\n                      });\n                    } else {\n                      this.first[next_production].forEach(e =>\n                        this.first[head].add(e)\n                      );\n                      chained_epsilon = false;\n                      break;\n                    }\n                    i++;\n                    next_production = production[i];\n                  }\n                  if (chained_epsilon) this.first[head].add(\"&\");\n                  continue;\n                }\n                this.first[head].add(each);\n              }\n            }\n          }\n        }\n      }\n      if (!this.first_has_changed(old_first)) break;\n    }\n  }\n  compute_follow_set() {\n    // 1 – Se A é o símbolo inicial da gramática -> $ ∈ Follow(A)\n    this.follow[this.S].add(\"$\");\n\n    while (true) {\n      let old_follow = [];\n      for (let each of this.N) {\n        old_follow[each] = new Set([...this.follow[each]]);\n      }\n\n      for (let A of this.N) {\n        let rule = this.P.filter(prod => prod.head === A);\n        for (let production of rule[0].prods) {\n          for (const [i, element] of production.entries()) {\n            if (this.N.has(element)) {\n              let B = element;\n              let Beta = new Set();\n              let index = i + 1;\n              while (production[index] !== undefined) {\n                Beta.add(production[index]);\n                index++;\n              }\n              let BetaFirst = Beta.size > 0 ? this.get_first(Beta) : new Set();\n              // 2 – Se A -> α B β ∈ P ∧ β ≠ ε -> adicione first(β) em Follow(B)\n              if (Beta.size > 0) {\n                for (let each of BetaFirst) {\n                  this.follow[B].add(each);\n                }\n                this.follow[B].delete(\"&\");\n              }\n              // 3 – Se A -> αB (ou A->αBβ, onde ε ∈ First(β)) ∈ P -> adicione Follow(A) em Follow(B)\n              if (Beta.size === 0 || BetaFirst.has(\"&\")) {\n                for (let follow_A of this.follow[A]) {\n                  this.follow[B].add(follow_A);\n                }\n              }\n            }\n          }\n        }\n      }\n      if (!this.follow_has_changed(old_follow)) break;\n    }\n  }\n\n  get_first(Beta) {\n    if ([...Beta][0] === \"&\") return new Set(\"&\");\n    let FirstBeta = new Set();\n    let i = 0;\n    let has_epsilon = false;\n    while ([...Beta][i] !== undefined) {\n      if (this.T.has([...Beta][i])) {\n        FirstBeta.add([...Beta][i]);\n        has_epsilon = false;\n        break;\n      } else {\n        for (let each of this.first[[...Beta][i]]) {\n          FirstBeta.add(each);\n        }\n        if (this.first[[...Beta][i]].has(\"&\")) {\n          FirstBeta.delete(\"&\");\n          has_epsilon = true;\n        } else {\n          has_epsilon = false;\n          break;\n        }\n      }\n      i++;\n    }\n    if (has_epsilon) FirstBeta.add(\"&\");\n    return FirstBeta;\n  }\n\n  equal_sets(as, bs) {\n    if (as.size !== bs.size) return false;\n    for (var a of as) if (!bs.has(a)) return false;\n    return true;\n  }\n\n  follow_has_changed(old_follow) {\n    for (let each of this.N) {\n      if (!this.equal_sets(old_follow[each], this.follow[each])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  first_has_changed(old_first) {\n    for (let each of this.N) {\n      if (!this.equal_sets(old_first[each], this.first[each])) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  build_parsing_table() {\n    for (let A of this.N) {\n      this.parsing_table[A] = [];\n      for (let b of this.T) {\n        this.parsing_table[A][b] = { prod: new Set() };\n      }\n      this.parsing_table[A][\"$\"] = { prod: new Set() };\n    }\n    for (let A of this.N) {\n      let rule = this.P.filter(prod => prod.head === A);\n      for (let production of rule[0].prods) {\n        if (production[0] === \"&\") {\n          for (let b of this.follow[A]) {\n            this.parsing_table[A][b].prod.add(\"&\");\n          }\n          if (this.follow[A].has(\"$\")) {\n            this.parsing_table[A][\"$\"].prod.add(\"&\");\n          }\n        } else {\n          for (let a of this.get_first(new Set(production))) {\n            if (a === \"&\") {\n              for (let b of this.follow[A]) {\n                this.parsing_table[A][b].prod.add(production);\n              }\n              if (this.follow[A].has(\"$\")) {\n                this.parsing_table[A][\"$\"].prod.add(\"&\");\n              }\n            } else {\n              this.parsing_table[A][a].prod.add(production);\n            }\n          }\n        }\n      }\n    }\n    // Set empty to error state\n    for (let A of this.N) {\n      if (!this.parsing_table[A][\"$\"].prod.size)\n        this.parsing_table[A][\"$\"].prod.add(\"<erro>\");\n      for (let b of this.T) {\n        if (!this.parsing_table[A][b].prod.size) {\n          this.parsing_table[A][b].prod.add(\"<erro>\");\n        }\n      }\n    }\n  }\n\n  analysis(symbol_table) {\n    /* Make a local copy of the symbol table */\n    this.symbol_table = JSON.parse(JSON.stringify(symbol_table));\n\n    /* Zera tabela de declaração de variáveis */\n    this.decl_table = [];\n    /* Zera árvore sitnaxe */\n    this.syntax_tree = {};\n\n    /* Check if symbol table not empty */\n    if (!this.symbol_table.length) {\n      this.result[0].message = \"Empty symbol table!\";\n      this.result[0].line_number = \"\";\n      return;\n    }\n\n    /* Add símbolo $ e símbolo inicial à pilha */\n    this.stack = [\n      { name: \"$\" },\n      { name: \"Synthesize.PROGRAM\" },\n      { name: \"PROGRAM\" }\n    ];\n\n    /* Add símbolo $ ao final da lista de tokens */\n    this.symbol_table.push({\n      id: this.symbol_table[this.symbol_table.length - 1].id + 1,\n      token: \"END\",\n      lexeme: \"$\",\n      detail: \"\",\n      line: this.symbol_table[this.symbol_table.length - 1].line\n    });\n\n    /* Loop de processamento da stack */\n    while (this.symbol_table.length > 0) {\n      console.log(this.stack.map(name => name));\n      let stack_symbol = this.stack.pop();\n\n      if (\n        stack_symbol.name.includes(\"Synthesize\") ||\n        stack_symbol.name.includes(\"Action\")\n      ) {\n        if (stack_symbol.name === \"Synthesize.BRACKETS\") {\n          console.log(stack_symbol.name);\n          stack_symbol.actions(this.stack, this.decl_table);\n          continue;\n        }\n        if (stack_symbol.actions !== undefined) {\n          stack_symbol.actions(this.stack);\n          console.log(stack_symbol.name);\n          console.log(stack_symbol);\n        }\n        if (stack_symbol.name === \"Synthesize.PROGRAM\") {\n          console.log(stack_symbol.name);\n          this.syntax_tree = stack_symbol.node;\n        }\n        continue;\n      }\n\n      if (stack_symbol.name === \"&\") {\n        if (stack_symbol.actions !== undefined) {\n          stack_symbol.actions(this.stack);\n        }\n        continue;\n      }\n\n      let input_element = this.symbol_table.shift();\n      if (stack_symbol.name === \"$\" && this.symbol_table.length > 1) {\n        this.result[0].message = \"Syntactic error!\";\n        this.result[0].line_number = input_element.line;\n        return;\n      }\n\n      /* Mapeamento de id, num e string para os respectivos tokens */\n      switch (input_element.token) {\n        case \"ID\":\n          input_element.lexemeAux = \"ident\";\n          break;\n        case \"NUM\":\n          input_element.lexemeAux = \"int-constant\";\n          break;\n        case \"STRING\":\n          input_element.lexemeAux = \"string-constant\";\n          break;\n        default:\n          input_element.lexemeAux = input_element.lexeme;\n          break;\n      }\n      /* Quando o símbolo do topo da pilha é igual ao próximo token,\n       * token é removido da pilha e da lista de tokens. Avança para a próxima iteração do loop. */\n      if (input_element.lexemeAux === stack_symbol.name) {\n        if (stack_symbol.actions !== undefined) {\n          stack_symbol.actions(this.stack, input_element.lexeme);\n        }\n        continue;\n      }\n\n      /* Se o símbolo da pilha não pertence aos não terminais: ERRO */\n      if (!this.N.has(stack_symbol.name)) {\n        this.result[0].message = \"Syntactic error!\";\n        this.result[0].line_number = input_element.line;\n        return;\n\n        /* Trecho de código pra tratar incoerência entre léxico LL1X++ vs EXPS e DEC */\n      } else if (\n        this.parsing_table[stack_symbol.name][input_element.lexemeAux] ===\n        undefined\n      ) {\n        this.result[0].message =\n          \"Syntactic error! - Don't use reserved words from LL1X++\";\n        this.result[0].line_number = input_element.line;\n        return;\n\n        /* Senão, se a transição na tabela preditiva entre simbolo da pilha e próximo token for para\n         * um estado de erro: ERRO */\n      } else if (\n        this.parsing_table[stack_symbol.name][input_element.lexemeAux].prod.has(\n          \"<erro>\"\n        )\n      ) {\n        this.result[0].message = \"Syntactic error!\";\n        this.result[0].line_number = input_element.line;\n        return;\n\n        /* Senão, devolve o token a lista de tokens e empilha os símbolos de acordo com a tabela preditiva */\n      } else {\n        this.symbol_table.unshift(input_element);\n\n        let items = [\n          ...this.parsing_table[stack_symbol.name][input_element.lexemeAux].prod\n        ][0];\n\n        items = addActionsToProds(stack_symbol, items);\n        let i = items.length;\n        while (i--) {\n          this.stack.push(items[i]);\n        }\n      }\n    }\n    this.result[0].message = \"Success!\";\n    this.result[0].line_number = \"\";\n\n    console.log(this.decl_table);\n    console.log(this.printDeclarations());\n    return;\n  }\n\n  printTree() {\n    return this.printNode(this.syntax_tree, \"\");\n  }\n\n  printNode(node, stringOutput) {\n    if (node.left) {\n      stringOutput = this.printNode(node.left, stringOutput);\n    }\n    if (node.right) {\n      stringOutput = this.printNode(node.right, stringOutput);\n    }\n    if (node.center) {\n      stringOutput = this.printNode(node.center, stringOutput);\n    }\n    return stringOutput + node.value + \"\\n\";\n  }\n\n  printThreeAddressCode() {\n    return this.threeAddressCode(this.syntax_tree, [], 1);\n  }\n\n  threeAddressCode(node, code, id) {\n    if (node.left) {\n      node.tempName = `t${id}`;\n      [code, id] = this.threeAddressCode(node.left, code, id + 1);\n    }\n    if (node.right) {\n      [code, id] = this.threeAddressCode(node.right, code, id + 1);\n      code.push(\n        `${node.tempName} = ${node.left.tempName} ${node.value} ${\n          node.right.tempName\n        }`\n      );\n      return [code, id];\n    }\n    if (node.center) {\n      node.tempName = `t${id}`;\n      [code, id] = this.threeAddressCode(node.center, code, id + 1);\n      code.push(`${node.tempName} = ${node.value} ${node.center.tempName}`);\n      return [code, id];\n    }\n    if (node.value && node.value.includes(\"[\")) {\n      node.tempName = `t${id}`;\n      code.push(`${node.tempName} = ${node.value}`);\n      return [code, id];\n    }\n    node.tempName = node.value;\n    return [code, id];\n  }\n\n  printDeclarations() {\n    let output = [];\n    for (let i in this.decl_table) {\n      let size = 1;\n      let type = \"\";\n      let id = this.decl_table[i].id;\n\n      if (typeof this.decl_table[i].type !== \"object\") {\n        output[i] = {\n          id: id,\n          type: this.decl_table[i].type,\n          size: this.decl_table[i].type === \"int\" ? 4 : 1\n        };\n        continue;\n      }\n      let aux = this.decl_table[i].type.array;\n      while (typeof aux.type === \"object\") {\n        size *= Number(aux.n);\n        type += \"array, \";\n        aux = aux.type.array;\n      }\n      type += \"array, \";\n      size *= Number(aux.n);\n      size *= aux.type === \"int\" ? 4 : 1;\n      type += aux.type;\n      output[i] = { id: id, type: type, size: size };\n    }\n    return output;\n  }\n}\n","/*\n *  @file Shape.js\n *\n *  @author Bruno Marques do Nascimento\n *  @date 23/04/2019\n *  @version 1.0\n */\n\nimport Lexical from \"./logic/lexical\";\nimport Synctatic from \"./logic/syntactic\";\nimport SyntacticExpsDec from \"./logic/syntacticExpsDec\";\n// import Grammar from \"./logic/Grammar\";\n\nexport const initial_shape = {\n  analyserReducer: {\n    lexical: new Lexical(\n      \"\"\n    ) /*`class bintree{\n  \n  class data{\n    int dia, mes, ano;\n    \n    constructor(){\n      ano = 1900;\n      mes = 1;\n      dia = 1;\n    }\n\n    constructor(int d, int m, int a){\n      dia = d;\n      mes = m;\n      ano = a;\n    }\n\n    int compara(data x){\n      if (ano < x.ano) \n        then return -1;\n      if (ano > x.ano)\n        then return 1;\n      if (mes < x.mes)\n        then return -1;\n      if (mes > x.mes)\n        then return 1;\n      if (dia < x.dia)\n        then return -1;\n      if (dia > x.dia)\n        then return 1;\n    }\n\n  }\n\n  data key;\n  bintree left, right;\n\n  constructor(data x){\n    key = x\n    left = null;\n    right = nul;\n  }\n\n  int insert(data k){\n    int x;\n    x = k.compara(key);\n    if (x < 0) then {\n      if (left != null){\n        then return left.insert(k);\n      left = new bintree(k);\n      return 1;\n    }\n    if (x > 0) then {\n      if (right != null){\n        then return right.insert(k);\n      right = new bintree(k);\n      return 1;\n    }\n    return 0;\n  }\n\n  int treeprint(int x){\n    int i;\n    if (left != null)\n      then i = left.treeprint(x+4);\n    for (i = 0; i < x; i = i + 1)\n      print \" \";\n    print key.dia + \"/\" + key.mes + \"/\" + key.ano + \"\\\\n\";\n    if (right != null)\n      then i = right.treeprint(x+4)\n  }\n\n  int start(){\n    bintree t;\n    int i, d, m, a;\n    data w;\n    print \"Digite o dia: \";\n    read d;\n    print \"Digite o mes: \";\n    read m;\n    print \"Digite o ano: \";\n    read a;\n    \n    w = new data (d, m, a);\n    t = new bintree(w);\n\n    for (i = 0; i < 10; i = i + 1) {\n      print \"Digite o dia: \";\n      read d;\n      print \"Digite o mes: \";\n      read m;\n      print \"Digite o ano: \";\n      read a;\n   \n      w = new data (d, m, a);\n      if (t.insert(w) == 0)\n        then print \"Elemento já existe\\\\n\";\n    }\n    i = t.treeprint(0);\n    return 0;\n  }\n}`),*/,\n    syntactic: new Synctatic(),\n    syntacticExpsDec: new SyntacticExpsDec()\n  }\n};\n","/*\n *  @file index.js\n *\n *  @author Bruno Marques do Nascimento\n *  @date 23/04/2019\n *  @version 1.0\n */\n\nimport \"./index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reducer from \"./reducers\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { initial_shape } from \"./Shape\";\n\nconst store = createStore(reducer, initial_shape);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}